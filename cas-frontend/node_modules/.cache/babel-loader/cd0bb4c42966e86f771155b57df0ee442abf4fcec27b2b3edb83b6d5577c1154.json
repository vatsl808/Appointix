{"ast":null,"code":"/**\r\n * Checks if a given date and time falls within a doctor's weekly availability schedule.\r\n *\r\n * @param {object} availabilitySchedule - The doctor's schedule object (e.g., { Monday: { startTime: 'HH:MM', endTime: 'HH:MM', isAvailable: boolean }, ... }).\r\n * @param {string|Date} selectedDate - The date of the potential appointment.\r\n * @param {string} selectedTime - The time of the potential appointment ('HH:MM').\r\n * @returns {boolean} - True if the time slot is available, false otherwise.\r\n */\nexport function isTimeSlotAvailable(availabilitySchedule, selectedDate, selectedTime) {\n  if (!availabilitySchedule || !selectedDate || !selectedTime) {\n    console.warn(\"Availability check missing required parameters.\");\n    return false; // Cannot determine availability without all info\n  }\n  try {\n    const dateObj = new Date(selectedDate);\n    // Adjust for potential timezone issues if needed, getDay() is local timezone based\n    const dayIndex = dateObj.getDay(); // 0 = Sunday, 1 = Monday, ..., 6 = Saturday\n\n    // Map getDay() index to our schedule keys\n    const daysMap = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n    const dayOfWeek = daysMap[dayIndex];\n    const daySchedule = availabilitySchedule[dayOfWeek];\n    if (!daySchedule || !daySchedule.isAvailable) {\n      // console.log(`Doctor unavailable on ${dayOfWeek}`);\n      return false; // Doctor is not available on this day\n    }\n\n    // Compare times (simple string comparison works for HH:MM format)\n    if (selectedTime >= daySchedule.startTime && selectedTime < daySchedule.endTime) {\n      // console.log(`Time slot ${selectedTime} on ${dayOfWeek} is available.`);\n      return true; // Time slot is within the available range\n    } else {\n      // console.log(`Time slot ${selectedTime} is outside available range ${daySchedule.startTime}-${daySchedule.endTime} on ${dayOfWeek}`);\n      return false; // Time slot is outside the available range\n    }\n  } catch (error) {\n    console.error(\"Error checking availability:\", error);\n    return false; // Return false in case of errors\n  }\n}\n\n// Example Usage:\n// const schedule = {\n//   Monday: { startTime: \"09:00\", endTime: \"17:00\", isAvailable: true },\n//   // ... other days\n// };\n// console.log(isTimeSlotAvailable(schedule, '2025-04-14', '10:00')); // true (Assuming 2025-04-14 is a Monday)\n// console.log(isTimeSlotAvailable(schedule, '2025-04-14', '18:00')); // false\n// console.log(isTimeSlotAvailable(schedule, '2025-04-13', '10:00')); // false (Assuming 2025-04-13 is a Sunday and Sunday is unavailable)\n\n/**\r\n * Formats the doctor's availability schedule into a concise summary string.\r\n * Groups consecutive days with the same available time slots.\r\n * Example: \"Mon-Fri: 09:00-17:00, Sat: 10:00-12:00\"\r\n *\r\n * @param {object} availabilitySchedule - The doctor's schedule object.\r\n * @returns {string} - A formatted summary string, or \"Availability not set\" if schedule is empty/invalid.\r\n */\nexport function formatAvailabilitySummary(availabilitySchedule) {\n  if (!availabilitySchedule || typeof availabilitySchedule !== 'object' || Object.keys(availabilitySchedule).length === 0) {\n    return \"Availability not set\";\n  }\n  const daysOrder = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n  const summaryParts = [];\n  let startDay = null;\n  let currentSlot = null;\n  const formatTime = time => time || ''; // Handle null/empty times gracefully\n\n  for (let i = 0; i < daysOrder.length; i++) {\n    const day = daysOrder[i];\n    const schedule = availabilitySchedule[day];\n    const slotKey = schedule && schedule.isAvailable ? `${formatTime(schedule.startTime)}-${formatTime(schedule.endTime)}` : null;\n    if (slotKey) {\n      // If the doctor is available on this day\n      if (startDay === null) {\n        // Start of a new group\n        startDay = day;\n        currentSlot = slotKey;\n      } else if (slotKey !== currentSlot) {\n        // Slot changed, end previous group\n        const endDay = daysOrder[i - 1];\n        const timeRange = currentSlot.split('-');\n        summaryParts.push(`${startDay === endDay ? startDay.substring(0, 3) : `${startDay.substring(0, 3)}-${endDay.substring(0, 3)}`}: ${timeRange[0]}-${timeRange[1]}`);\n        startDay = day; // Start new group\n        currentSlot = slotKey;\n      }\n      // If slotKey is the same as currentSlot, continue the group\n    } else {\n      // Doctor is not available, end any current group\n      if (startDay !== null) {\n        const endDay = daysOrder[i - 1];\n        const timeRange = currentSlot.split('-');\n        summaryParts.push(`${startDay === endDay ? startDay.substring(0, 3) : `${startDay.substring(0, 3)}-${endDay.substring(0, 3)}`}: ${timeRange[0]}-${timeRange[1]}`);\n        startDay = null;\n        currentSlot = null;\n      }\n    }\n  }\n\n  // Handle the last group if it extends to Sunday\n  if (startDay !== null) {\n    const endDay = daysOrder[daysOrder.length - 1];\n    const timeRange = currentSlot.split('-');\n    summaryParts.push(`${startDay === endDay ? startDay.substring(0, 3) : `${startDay.substring(0, 3)}-${endDay.substring(0, 3)}`}: ${timeRange[0]}-${timeRange[1]}`);\n  }\n  return summaryParts.length > 0 ? summaryParts.join(', ') : \"Not available\";\n}","map":{"version":3,"names":["isTimeSlotAvailable","availabilitySchedule","selectedDate","selectedTime","console","warn","dateObj","Date","dayIndex","getDay","daysMap","dayOfWeek","daySchedule","isAvailable","startTime","endTime","error","formatAvailabilitySummary","Object","keys","length","daysOrder","summaryParts","startDay","currentSlot","formatTime","time","i","day","schedule","slotKey","endDay","timeRange","split","push","substring","join"],"sources":["C:/Users/vatsl/OneDrive/Desktop/CAS/cas-frontend/src/utils/availabilityUtils.js"],"sourcesContent":["/**\r\n * Checks if a given date and time falls within a doctor's weekly availability schedule.\r\n *\r\n * @param {object} availabilitySchedule - The doctor's schedule object (e.g., { Monday: { startTime: 'HH:MM', endTime: 'HH:MM', isAvailable: boolean }, ... }).\r\n * @param {string|Date} selectedDate - The date of the potential appointment.\r\n * @param {string} selectedTime - The time of the potential appointment ('HH:MM').\r\n * @returns {boolean} - True if the time slot is available, false otherwise.\r\n */\r\nexport function isTimeSlotAvailable(availabilitySchedule, selectedDate, selectedTime) {\r\n  if (!availabilitySchedule || !selectedDate || !selectedTime) {\r\n    console.warn(\"Availability check missing required parameters.\");\r\n    return false; // Cannot determine availability without all info\r\n  }\r\n\r\n  try {\r\n    const dateObj = new Date(selectedDate);\r\n    // Adjust for potential timezone issues if needed, getDay() is local timezone based\r\n    const dayIndex = dateObj.getDay(); // 0 = Sunday, 1 = Monday, ..., 6 = Saturday\r\n\r\n    // Map getDay() index to our schedule keys\r\n    const daysMap = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n    const dayOfWeek = daysMap[dayIndex];\r\n\r\n    const daySchedule = availabilitySchedule[dayOfWeek];\r\n\r\n    if (!daySchedule || !daySchedule.isAvailable) {\r\n      // console.log(`Doctor unavailable on ${dayOfWeek}`);\r\n      return false; // Doctor is not available on this day\r\n    }\r\n\r\n    // Compare times (simple string comparison works for HH:MM format)\r\n    if (selectedTime >= daySchedule.startTime && selectedTime < daySchedule.endTime) {\r\n      // console.log(`Time slot ${selectedTime} on ${dayOfWeek} is available.`);\r\n      return true; // Time slot is within the available range\r\n    } else {\r\n      // console.log(`Time slot ${selectedTime} is outside available range ${daySchedule.startTime}-${daySchedule.endTime} on ${dayOfWeek}`);\r\n      return false; // Time slot is outside the available range\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error checking availability:\", error);\r\n    return false; // Return false in case of errors\r\n  }\r\n}\r\n\r\n// Example Usage:\r\n// const schedule = {\r\n//   Monday: { startTime: \"09:00\", endTime: \"17:00\", isAvailable: true },\r\n//   // ... other days\r\n// };\r\n// console.log(isTimeSlotAvailable(schedule, '2025-04-14', '10:00')); // true (Assuming 2025-04-14 is a Monday)\r\n// console.log(isTimeSlotAvailable(schedule, '2025-04-14', '18:00')); // false\r\n// console.log(isTimeSlotAvailable(schedule, '2025-04-13', '10:00')); // false (Assuming 2025-04-13 is a Sunday and Sunday is unavailable)\r\n\r\n\r\n/**\r\n * Formats the doctor's availability schedule into a concise summary string.\r\n * Groups consecutive days with the same available time slots.\r\n * Example: \"Mon-Fri: 09:00-17:00, Sat: 10:00-12:00\"\r\n *\r\n * @param {object} availabilitySchedule - The doctor's schedule object.\r\n * @returns {string} - A formatted summary string, or \"Availability not set\" if schedule is empty/invalid.\r\n */\r\nexport function formatAvailabilitySummary(availabilitySchedule) {\r\n  if (!availabilitySchedule || typeof availabilitySchedule !== 'object' || Object.keys(availabilitySchedule).length === 0) {\r\n    return \"Availability not set\";\r\n  }\r\n\r\n  const daysOrder = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\r\n  const summaryParts = [];\r\n  let startDay = null;\r\n  let currentSlot = null;\r\n\r\n  const formatTime = (time) => time || ''; // Handle null/empty times gracefully\r\n\r\n  for (let i = 0; i < daysOrder.length; i++) {\r\n    const day = daysOrder[i];\r\n    const schedule = availabilitySchedule[day];\r\n    const slotKey = schedule && schedule.isAvailable ? `${formatTime(schedule.startTime)}-${formatTime(schedule.endTime)}` : null;\r\n\r\n    if (slotKey) { // If the doctor is available on this day\r\n      if (startDay === null) { // Start of a new group\r\n        startDay = day;\r\n        currentSlot = slotKey;\r\n      } else if (slotKey !== currentSlot) { // Slot changed, end previous group\r\n        const endDay = daysOrder[i - 1];\r\n        const timeRange = currentSlot.split('-');\r\n        summaryParts.push(`${startDay === endDay ? startDay.substring(0, 3) : `${startDay.substring(0, 3)}-${endDay.substring(0, 3)}`}: ${timeRange[0]}-${timeRange[1]}`);\r\n        startDay = day; // Start new group\r\n        currentSlot = slotKey;\r\n      }\r\n      // If slotKey is the same as currentSlot, continue the group\r\n    } else { // Doctor is not available, end any current group\r\n      if (startDay !== null) {\r\n        const endDay = daysOrder[i - 1];\r\n        const timeRange = currentSlot.split('-');\r\n        summaryParts.push(`${startDay === endDay ? startDay.substring(0, 3) : `${startDay.substring(0, 3)}-${endDay.substring(0, 3)}`}: ${timeRange[0]}-${timeRange[1]}`);\r\n        startDay = null;\r\n        currentSlot = null;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Handle the last group if it extends to Sunday\r\n  if (startDay !== null) {\r\n    const endDay = daysOrder[daysOrder.length - 1];\r\n     const timeRange = currentSlot.split('-');\r\n    summaryParts.push(`${startDay === endDay ? startDay.substring(0, 3) : `${startDay.substring(0, 3)}-${endDay.substring(0, 3)}`}: ${timeRange[0]}-${timeRange[1]}`);\r\n  }\r\n\r\n  return summaryParts.length > 0 ? summaryParts.join(', ') : \"Not available\";\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}