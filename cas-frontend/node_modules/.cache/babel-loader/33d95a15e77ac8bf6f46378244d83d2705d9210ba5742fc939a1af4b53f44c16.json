{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vatsl\\\\OneDrive\\\\Desktop\\\\CAS - Copy\\\\cas-frontend\\\\src\\\\pages\\\\LoginPage.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport LoginForm from '../components/LoginForm';\nimport '../styles/login.css';\nimport loginIllustration from '../assets/login_image.png'; // Removed unused import\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LoginPage({\n  setIsAuthenticated\n}) {\n  _s();\n  // Add setIsAuthenticated prop\n  const [error, setError] = useState('');\n  const navigate = useNavigate();\n  const handleLogin = async credentials => {\n    setError(''); // Clear previous errors\n    try {\n      // Call the backend login API\n      const response = await fetch('http://localhost:5001/api/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        // Send email, password, and userType (though backend currently only uses email/password for lookup)\n        body: JSON.stringify(credentials)\n      });\n      const result = await response.json();\n      if (!response.ok) {\n        // Handle login errors (e.g., invalid credentials)\n        throw new Error(result.error || `HTTP error! status: ${response.status}`);\n      }\n\n      // Login successful - Store token and user type from response\n      console.log('Login successful:', result.message);\n      localStorage.setItem('token', result.token);\n      localStorage.setItem('userType', result.userType);\n      // Store doctorId if it exists in the response\n      if (result.doctorId) {\n        localStorage.setItem('doctorId', result.doctorId);\n      } else {\n        // Ensure any previous doctorId is cleared if logging in as patient\n        localStorage.removeItem('doctorId');\n      }\n      setIsAuthenticated(true); // Update auth state in App.js\n\n      // Redirect based on user type from backend response\n      navigate(result.userType === 'doctor' ? '/doctor-dashboard' : '/patient-dashboard');\n    } catch (err) {\n      console.error(\"Login error:\", err);\n      setError(err.message || 'Login failed. Please check your credentials.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"auth-page login-page\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"auth-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"auth-visual\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: loginIllustration,\n          alt: \"Login Illustration\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"auth-form-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-wrapper\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Welcome Back\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"subtitle\",\n            children: \"Login to access your dashboard.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"alert alert-danger\",\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(LoginForm, {\n            onLogin: handleLogin\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"auth-switch-link\",\n            children: [\"Don't have an account? \", /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"/register\",\n              children: \"Register here\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 38\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n_s(LoginPage, \"iYeoHZ50hDVhDOjNvGr4rV7yYW4=\", false, function () {\n  return [useNavigate];\n});\n_c = LoginPage;\nexport default LoginPage;\nvar _c;\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"names":["useState","useNavigate","LoginForm","loginIllustration","jsxDEV","_jsxDEV","LoginPage","setIsAuthenticated","_s","error","setError","navigate","handleLogin","credentials","response","fetch","method","headers","body","JSON","stringify","result","json","ok","Error","status","console","log","message","localStorage","setItem","token","userType","doctorId","removeItem","err","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onLogin","href","_c","$RefreshReg$"],"sources":["C:/Users/vatsl/OneDrive/Desktop/CAS - Copy/cas-frontend/src/pages/LoginPage.js"],"sourcesContent":["import { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport LoginForm from '../components/LoginForm';\r\nimport '../styles/login.css';\r\nimport loginIllustration from '../assets/login_image.png'; // Removed unused import\r\n\r\nfunction LoginPage({ setIsAuthenticated }) { // Add setIsAuthenticated prop\r\n  const [error, setError] = useState('');\r\n  const navigate = useNavigate();\r\n\r\n  const handleLogin = async (credentials) => {\r\n    setError(''); // Clear previous errors\r\n    try {\r\n      // Call the backend login API\r\n      const response = await fetch('http://localhost:5001/api/login', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        // Send email, password, and userType (though backend currently only uses email/password for lookup)\r\n        body: JSON.stringify(credentials),\r\n      });\r\n\r\n      const result = await response.json();\r\n\r\n      if (!response.ok) {\r\n        // Handle login errors (e.g., invalid credentials)\r\n        throw new Error(result.error || `HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      // Login successful - Store token and user type from response\r\n      console.log('Login successful:', result.message);\r\n      localStorage.setItem('token', result.token);\r\n      localStorage.setItem('userType', result.userType);\r\n      // Store doctorId if it exists in the response\r\n      if (result.doctorId) {\r\n        localStorage.setItem('doctorId', result.doctorId);\r\n      } else {\r\n        // Ensure any previous doctorId is cleared if logging in as patient\r\n        localStorage.removeItem('doctorId');\r\n      }\r\n      setIsAuthenticated(true); // Update auth state in App.js\r\n\r\n      // Redirect based on user type from backend response\r\n      navigate(result.userType === 'doctor' ? '/doctor-dashboard' : '/patient-dashboard');\r\n\r\n    } catch (err) {\r\n      console.error(\"Login error:\", err);\r\n      setError(err.message || 'Login failed. Please check your credentials.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"auth-page login-page\">\r\n      <div className=\"auth-container\">\r\n        {/* Left Side - Illustration/Branding */}\r\n        <div className=\"auth-visual\">\r\n          {/* Image will now fill this container */}\r\n          <img src={loginIllustration} alt=\"Login Illustration\" />\r\n          {/* Removed the visual-content div */}\r\n        </div>\r\n\r\n        {/* Right Side - Form */}\r\n        <div className=\"auth-form-container\">\r\n          <div className=\"form-wrapper\">\r\n            <h2>Welcome Back</h2>\r\n            <p className=\"subtitle\">Login to access your dashboard.</p>\r\n            {error && <div className=\"alert alert-danger\">{error}</div>}\r\n            <LoginForm onLogin={handleLogin} />\r\n            <p className=\"auth-switch-link\">\r\n              Don't have an account? <a href=\"/register\">Register here</a>\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LoginPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}