{"ast":null,"code":"/**\r\n * Checks if a given date and time falls within a doctor's weekly availability schedule.\r\n *\r\n * @param {object} availabilitySchedule - The doctor's schedule object (e.g., { Monday: { startTime: 'HH:MM', endTime: 'HH:MM', isAvailable: boolean }, ... }).\r\n * @param {string|Date} selectedDate - The date of the potential appointment.\r\n * @param {string} selectedTime - The time of the potential appointment ('HH:MM').\r\n * @returns {boolean} - True if the time slot is available, false otherwise.\r\n */\nexport function isTimeSlotAvailable(availabilitySchedule, selectedDate, selectedTime) {\n  if (!availabilitySchedule || !selectedDate || !selectedTime) {\n    console.warn(\"Availability check missing required parameters.\");\n    return false; // Cannot determine availability without all info\n  }\n  try {\n    const dateObj = new Date(selectedDate);\n    // Adjust for potential timezone issues if needed, getDay() is local timezone based\n    const dayIndex = dateObj.getDay(); // 0 = Sunday, 1 = Monday, ..., 6 = Saturday\n\n    // Map getDay() index to our schedule keys\n    const daysMap = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n    const dayOfWeek = daysMap[dayIndex];\n    const daySchedule = availabilitySchedule[dayOfWeek];\n    if (!daySchedule || !daySchedule.isAvailable) {\n      // console.log(`Doctor unavailable on ${dayOfWeek}`);\n      return false; // Doctor is not available on this day\n    }\n\n    // Compare times (simple string comparison works for HH:MM format)\n    if (selectedTime >= daySchedule.startTime && selectedTime < daySchedule.endTime) {\n      // console.log(`Time slot ${selectedTime} on ${dayOfWeek} is available.`);\n      return true; // Time slot is within the available range\n    } else {\n      // console.log(`Time slot ${selectedTime} is outside available range ${daySchedule.startTime}-${daySchedule.endTime} on ${dayOfWeek}`);\n      return false; // Time slot is outside the available range\n    }\n  } catch (error) {\n    console.error(\"Error checking availability:\", error);\n    return false; // Return false in case of errors\n  }\n}\n\n// Example Usage:\n// const schedule = {\n//   Monday: { startTime: \"09:00\", endTime: \"17:00\", isAvailable: true },\n//   // ... other days\n// };\n// console.log(isTimeSlotAvailable(schedule, '2025-04-14', '10:00')); // true (Assuming 2025-04-14 is a Monday)\n// console.log(isTimeSlotAvailable(schedule, '2025-04-14', '18:00')); // false\n// console.log(isTimeSlotAvailable(schedule, '2025-04-13', '10:00')); // false (Assuming 2025-04-13 is a Sunday and Sunday is unavailable)","map":{"version":3,"names":["isTimeSlotAvailable","availabilitySchedule","selectedDate","selectedTime","console","warn","dateObj","Date","dayIndex","getDay","daysMap","dayOfWeek","daySchedule","isAvailable","startTime","endTime","error"],"sources":["C:/Users/vatsl/OneDrive/Desktop/CAS - Copy/cas-frontend/src/utils/availabilityUtils.js"],"sourcesContent":["/**\r\n * Checks if a given date and time falls within a doctor's weekly availability schedule.\r\n *\r\n * @param {object} availabilitySchedule - The doctor's schedule object (e.g., { Monday: { startTime: 'HH:MM', endTime: 'HH:MM', isAvailable: boolean }, ... }).\r\n * @param {string|Date} selectedDate - The date of the potential appointment.\r\n * @param {string} selectedTime - The time of the potential appointment ('HH:MM').\r\n * @returns {boolean} - True if the time slot is available, false otherwise.\r\n */\r\nexport function isTimeSlotAvailable(availabilitySchedule, selectedDate, selectedTime) {\r\n  if (!availabilitySchedule || !selectedDate || !selectedTime) {\r\n    console.warn(\"Availability check missing required parameters.\");\r\n    return false; // Cannot determine availability without all info\r\n  }\r\n\r\n  try {\r\n    const dateObj = new Date(selectedDate);\r\n    // Adjust for potential timezone issues if needed, getDay() is local timezone based\r\n    const dayIndex = dateObj.getDay(); // 0 = Sunday, 1 = Monday, ..., 6 = Saturday\r\n\r\n    // Map getDay() index to our schedule keys\r\n    const daysMap = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n    const dayOfWeek = daysMap[dayIndex];\r\n\r\n    const daySchedule = availabilitySchedule[dayOfWeek];\r\n\r\n    if (!daySchedule || !daySchedule.isAvailable) {\r\n      // console.log(`Doctor unavailable on ${dayOfWeek}`);\r\n      return false; // Doctor is not available on this day\r\n    }\r\n\r\n    // Compare times (simple string comparison works for HH:MM format)\r\n    if (selectedTime >= daySchedule.startTime && selectedTime < daySchedule.endTime) {\r\n      // console.log(`Time slot ${selectedTime} on ${dayOfWeek} is available.`);\r\n      return true; // Time slot is within the available range\r\n    } else {\r\n      // console.log(`Time slot ${selectedTime} is outside available range ${daySchedule.startTime}-${daySchedule.endTime} on ${dayOfWeek}`);\r\n      return false; // Time slot is outside the available range\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error checking availability:\", error);\r\n    return false; // Return false in case of errors\r\n  }\r\n}\r\n\r\n// Example Usage:\r\n// const schedule = {\r\n//   Monday: { startTime: \"09:00\", endTime: \"17:00\", isAvailable: true },\r\n//   // ... other days\r\n// };\r\n// console.log(isTimeSlotAvailable(schedule, '2025-04-14', '10:00')); // true (Assuming 2025-04-14 is a Monday)\r\n// console.log(isTimeSlotAvailable(schedule, '2025-04-14', '18:00')); // false\r\n// console.log(isTimeSlotAvailable(schedule, '2025-04-13', '10:00')); // false (Assuming 2025-04-13 is a Sunday and Sunday is unavailable)\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,mBAAmBA,CAACC,oBAAoB,EAAEC,YAAY,EAAEC,YAAY,EAAE;EACpF,IAAI,CAACF,oBAAoB,IAAI,CAACC,YAAY,IAAI,CAACC,YAAY,EAAE;IAC3DC,OAAO,CAACC,IAAI,CAAC,iDAAiD,CAAC;IAC/D,OAAO,KAAK,CAAC,CAAC;EAChB;EAEA,IAAI;IACF,MAAMC,OAAO,GAAG,IAAIC,IAAI,CAACL,YAAY,CAAC;IACtC;IACA,MAAMM,QAAQ,GAAGF,OAAO,CAACG,MAAM,CAAC,CAAC,CAAC,CAAC;;IAEnC;IACA,MAAMC,OAAO,GAAG,CAAC,QAAQ,EAAE,QAAQ,EAAE,SAAS,EAAE,WAAW,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,CAAC;IAC9F,MAAMC,SAAS,GAAGD,OAAO,CAACF,QAAQ,CAAC;IAEnC,MAAMI,WAAW,GAAGX,oBAAoB,CAACU,SAAS,CAAC;IAEnD,IAAI,CAACC,WAAW,IAAI,CAACA,WAAW,CAACC,WAAW,EAAE;MAC5C;MACA,OAAO,KAAK,CAAC,CAAC;IAChB;;IAEA;IACA,IAAIV,YAAY,IAAIS,WAAW,CAACE,SAAS,IAAIX,YAAY,GAAGS,WAAW,CAACG,OAAO,EAAE;MAC/E;MACA,OAAO,IAAI,CAAC,CAAC;IACf,CAAC,MAAM;MACL;MACA,OAAO,KAAK,CAAC,CAAC;IAChB;EACF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdZ,OAAO,CAACY,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,OAAO,KAAK,CAAC,CAAC;EAChB;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}