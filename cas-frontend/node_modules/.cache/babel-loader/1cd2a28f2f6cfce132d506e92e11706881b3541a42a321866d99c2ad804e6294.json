{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vatsl\\\\OneDrive\\\\Desktop\\\\CAS - Copy\\\\cas-frontend\\\\src\\\\components\\\\AvailabilityModal.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { FaClock } from 'react-icons/fa'; // Re-add FaClock import\nimport '../styles/modal.css';\nimport '../styles/availability.css'; // Ensure this is imported\nimport '../styles/availability.css'; // Ensure this is imported\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst daysOfWeek = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\nfunction AvailabilityModal({\n  isOpen,\n  currentAvailability,\n  onUpdate,\n  onClose\n}) {\n  _s();\n  const [schedule, setSchedule] = useState({});\n  // No refs needed for this approach\n\n  // Initialize local state when the modal opens or availability data changes\n  useEffect(() => {\n    // Revert to simpler initialization\n    if (currentAvailability) {\n      setSchedule(JSON.parse(JSON.stringify(currentAvailability))); // Deep copy\n    } else {\n      // Ensure schedule is initialized if currentAvailability is null/undefined initially\n      const initialSchedule = {};\n      daysOfWeek.forEach(day => {\n        initialSchedule[day] = {\n          startTime: '',\n          endTime: '',\n          isAvailable: false\n        };\n      });\n      setSchedule(initialSchedule);\n    }\n  }, [currentAvailability, isOpen]); // Re-initialize if the prop changes while open or modal opens\n\n  const handleCheckboxChange = (day, checked) => {\n    setSchedule(prev => ({\n      ...prev,\n      [day]: {\n        ...prev[day],\n        isAvailable: checked\n      }\n    }));\n  };\n  const handleTimeChange = (day, timeType, value) => {\n    setSchedule(prev => ({\n      ...prev,\n      [day]: {\n        ...prev[day],\n        [timeType]: value\n      }\n    }));\n  };\n\n  // Remove handleIconClick function\n\n  const handleSubmit = async e => {\n    // Make async\n    e.preventDefault();\n    console.log(\"Attempting to save schedule from modal:\", schedule);\n    const token = localStorage.getItem('token');\n    if (!token) {\n      // Handle error - maybe show message in modal or rely on parent\n      console.error(\"Authentication token not found.\");\n      alert(\"Authentication error. Please log in again.\");\n      return;\n    }\n    try {\n      const response = await fetch('http://localhost:5001/api/doctors/me/availability', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify(schedule) // Send the entire schedule object\n      });\n      const result = await response.json();\n      if (!response.ok) {\n        throw new Error(result.error || `HTTP error! status: ${response.status}`);\n      }\n\n      // Call parent's onUpdate handler ONLY on successful API call\n      onUpdate(schedule); // Pass the updated schedule back to update parent state\n      // onClose(); // onUpdate now handles closing in parent\n\n      alert(result.message || \"Availability updated successfully!\"); // Give feedback\n    } catch (err) {\n      console.error(\"Error updating availability:\", err);\n      // TODO: Display error message within the modal\n      alert(`Error updating availability: ${err.message}`);\n    }\n  };\n  if (!isOpen) {\n    return null;\n  }\n\n  // --- TEMPORARY DIAGNOSTIC RENDER ---\n  // Render only a single time input to test its basic functionality\n  // This removes the modal backdrop, container, form, and loop structure.\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: 'fixed',\n      top: '20%',\n      left: '20%',\n      padding: '50px',\n      background: 'lightgray',\n      border: '2px solid black',\n      zIndex: 1100\n    },\n    children: [\" \", /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Testing Time Input:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"time\",\n      id: \"test-time-input\",\n      style: {\n        border: '1px solid black',\n        padding: '5px'\n      } // Basic inline styles\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onClose,\n      style: {\n        padding: '5px 10px'\n      },\n      children: \"Close Test\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n  // --- END TEMPORARY DIAGNOSTIC RENDER ---\n\n  /* // Original Render Logic (Commented out for reference)\r\n  return (\r\n     <div className={`modal-backdrop ${isOpen ? 'open' : ''}`}>\r\n       <div className=\"modal-container availability-modal-container\">\r\n         <div className=\"modal-header\">\r\n           <h2>Set Weekly Availability</h2>\r\n           <button onClick={onClose} className=\"modal-close-btn\">&times;</button>\r\n         </div>\r\n         <form onSubmit={handleSubmit}>\r\n           <div className=\"modal-body availability-modal-body\">\r\n             {daysOfWeek.map(day => (\r\n               <div key={day} className=\"availability-day-row\">\r\n                 <label className=\"day-label\">{day}</label>\r\n                 <div className=\"day-controls\">\r\n                   <input\r\n                     type=\"checkbox\"\r\n                     id={`available-${day}`}\r\n                     checked={schedule[day]?.isAvailable || false}\r\n                     onChange={(e) => handleCheckboxChange(day, e.target.checked)}\r\n                     className=\"availability-checkbox\"\r\n                   />\r\n                   <label htmlFor={`available-${day}`} className=\"availability-toggle-label\">\r\n                     {schedule[day]?.isAvailable ? 'Available' : 'Unavailable'}\r\n                   </label>\r\n                   <div className=\"time-inputs\">\r\n                     <input\r\n                       type=\"time\"\r\n                       id={`start-${day}`}\r\n                       value={schedule[day]?.startTime || ''}\r\n                       onChange={(e) => handleTimeChange(day, 'startTime', e.target.value)}\r\n                       disabled={!schedule[day]?.isAvailable}\r\n                       className=\"form-control time-input\" // Assuming .time-input styles are commented out\r\n                       required={schedule[day]?.isAvailable}\r\n                     />\r\n                     <span> - </span>\r\n                     <input\r\n                       type=\"time\"\r\n                       id={`end-${day}`}\r\n                       value={schedule[day]?.endTime || ''}\r\n                       onChange={(e) => handleTimeChange(day, 'endTime', e.target.value)}\r\n                       disabled={!schedule[day]?.isAvailable}\r\n                       className=\"form-control time-input\" // Assuming .time-input styles are commented out\r\n                       required={schedule[day]?.isAvailable}\r\n                     />\r\n                   </div>\r\n                 </div>\r\n               </div>\r\n             ))}\r\n           </div>\r\n           <div className=\"modal-footer\">\r\n             <button type=\"submit\" className=\"btn btn-primary\">Save Availability</button>\r\n             <button type=\"button\" onClick={onClose} className=\"btn btn-secondary\">Cancel</button>\r\n           </div>\r\n         </form>\r\n       </div>\r\n     </div>\r\n   );\r\n  */\n}\n_s(AvailabilityModal, \"zqvN6t9A8VKtQQACSFxMv8tIR3M=\");\n_c = AvailabilityModal;\nexport default AvailabilityModal;\nvar _c;\n$RefreshReg$(_c, \"AvailabilityModal\");","map":{"version":3,"names":["React","useState","useEffect","FaClock","jsxDEV","_jsxDEV","daysOfWeek","AvailabilityModal","isOpen","currentAvailability","onUpdate","onClose","_s","schedule","setSchedule","JSON","parse","stringify","initialSchedule","forEach","day","startTime","endTime","isAvailable","handleCheckboxChange","checked","prev","handleTimeChange","timeType","value","handleSubmit","e","preventDefault","console","log","token","localStorage","getItem","error","alert","response","fetch","method","headers","body","result","json","ok","Error","status","message","err","style","position","top","left","padding","background","border","zIndex","children","fileName","_jsxFileName","lineNumber","columnNumber","type","id","onClick","_c","$RefreshReg$"],"sources":["C:/Users/vatsl/OneDrive/Desktop/CAS - Copy/cas-frontend/src/components/AvailabilityModal.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { FaClock } from 'react-icons/fa'; // Re-add FaClock import\r\nimport '../styles/modal.css';\r\nimport '../styles/availability.css'; // Ensure this is imported\r\nimport '../styles/availability.css'; // Ensure this is imported\r\n\r\nconst daysOfWeek = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\r\n\r\nfunction AvailabilityModal({ isOpen, currentAvailability, onUpdate, onClose }) {\r\n  const [schedule, setSchedule] = useState({});\r\n  // No refs needed for this approach\r\n\r\n  // Initialize local state when the modal opens or availability data changes\r\n  useEffect(() => {\r\n    // Revert to simpler initialization\r\n    if (currentAvailability) {\r\n      setSchedule(JSON.parse(JSON.stringify(currentAvailability))); // Deep copy\r\n    } else {\r\n       // Ensure schedule is initialized if currentAvailability is null/undefined initially\r\n       const initialSchedule = {};\r\n       daysOfWeek.forEach(day => {\r\n          initialSchedule[day] = { startTime: '', endTime: '', isAvailable: false };\r\n       });\r\n       setSchedule(initialSchedule);\r\n    }\r\n  }, [currentAvailability, isOpen]); // Re-initialize if the prop changes while open or modal opens\r\n\r\n  const handleCheckboxChange = (day, checked) => {\r\n    setSchedule(prev => ({\r\n      ...prev,\r\n      [day]: { ...prev[day], isAvailable: checked }\r\n    }));\r\n  };\r\n\r\n  const handleTimeChange = (day, timeType, value) => {\r\n    setSchedule(prev => ({\r\n      ...prev,\r\n      [day]: { ...prev[day], [timeType]: value }\r\n    }));\r\n  };\r\n\r\n  // Remove handleIconClick function\r\n\r\n  const handleSubmit = async (e) => { // Make async\r\n    e.preventDefault();\r\n    console.log(\"Attempting to save schedule from modal:\", schedule);\r\n\r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n      // Handle error - maybe show message in modal or rely on parent\r\n      console.error(\"Authentication token not found.\");\r\n      alert(\"Authentication error. Please log in again.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:5001/api/doctors/me/availability', {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${token}`\r\n        },\r\n        body: JSON.stringify(schedule) // Send the entire schedule object\r\n      });\r\n\r\n      const result = await response.json();\r\n\r\n      if (!response.ok) {\r\n        throw new Error(result.error || `HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      // Call parent's onUpdate handler ONLY on successful API call\r\n      onUpdate(schedule); // Pass the updated schedule back to update parent state\r\n      // onClose(); // onUpdate now handles closing in parent\r\n\r\n      alert(result.message || \"Availability updated successfully!\"); // Give feedback\r\n\r\n    } catch (err) {\r\n      console.error(\"Error updating availability:\", err);\r\n      // TODO: Display error message within the modal\r\n      alert(`Error updating availability: ${err.message}`);\r\n    }\r\n  };\r\n\r\n  if (!isOpen) {\r\n    return null;\r\n  }\r\n\r\n  // --- TEMPORARY DIAGNOSTIC RENDER ---\r\n  // Render only a single time input to test its basic functionality\r\n  // This removes the modal backdrop, container, form, and loop structure.\r\n  return (\r\n    <div style={{ position: 'fixed', top: '20%', left: '20%', padding: '50px', background: 'lightgray', border: '2px solid black', zIndex: 1100 }}> {/* Basic container for visibility */}\r\n      <h3>Testing Time Input:</h3>\r\n      <input\r\n        type=\"time\"\r\n        id=\"test-time-input\"\r\n        style={{ border: '1px solid black', padding: '5px' }} // Basic inline styles\r\n      />\r\n      <br /><br />\r\n      <button onClick={onClose} style={{ padding: '5px 10px' }}>Close Test</button> {/* Keep close button */}\r\n    </div>\r\n  );\r\n  // --- END TEMPORARY DIAGNOSTIC RENDER ---\r\n\r\n  /* // Original Render Logic (Commented out for reference)\r\n  return (\r\n     <div className={`modal-backdrop ${isOpen ? 'open' : ''}`}>\r\n       <div className=\"modal-container availability-modal-container\">\r\n         <div className=\"modal-header\">\r\n           <h2>Set Weekly Availability</h2>\r\n           <button onClick={onClose} className=\"modal-close-btn\">&times;</button>\r\n         </div>\r\n         <form onSubmit={handleSubmit}>\r\n           <div className=\"modal-body availability-modal-body\">\r\n             {daysOfWeek.map(day => (\r\n               <div key={day} className=\"availability-day-row\">\r\n                 <label className=\"day-label\">{day}</label>\r\n                 <div className=\"day-controls\">\r\n                   <input\r\n                     type=\"checkbox\"\r\n                     id={`available-${day}`}\r\n                     checked={schedule[day]?.isAvailable || false}\r\n                     onChange={(e) => handleCheckboxChange(day, e.target.checked)}\r\n                     className=\"availability-checkbox\"\r\n                   />\r\n                   <label htmlFor={`available-${day}`} className=\"availability-toggle-label\">\r\n                     {schedule[day]?.isAvailable ? 'Available' : 'Unavailable'}\r\n                   </label>\r\n                   <div className=\"time-inputs\">\r\n                     <input\r\n                       type=\"time\"\r\n                       id={`start-${day}`}\r\n                       value={schedule[day]?.startTime || ''}\r\n                       onChange={(e) => handleTimeChange(day, 'startTime', e.target.value)}\r\n                       disabled={!schedule[day]?.isAvailable}\r\n                       className=\"form-control time-input\" // Assuming .time-input styles are commented out\r\n                       required={schedule[day]?.isAvailable}\r\n                     />\r\n                     <span> - </span>\r\n                     <input\r\n                       type=\"time\"\r\n                       id={`end-${day}`}\r\n                       value={schedule[day]?.endTime || ''}\r\n                       onChange={(e) => handleTimeChange(day, 'endTime', e.target.value)}\r\n                       disabled={!schedule[day]?.isAvailable}\r\n                       className=\"form-control time-input\" // Assuming .time-input styles are commented out\r\n                       required={schedule[day]?.isAvailable}\r\n                     />\r\n                   </div>\r\n                 </div>\r\n               </div>\r\n             ))}\r\n           </div>\r\n           <div className=\"modal-footer\">\r\n             <button type=\"submit\" className=\"btn btn-primary\">Save Availability</button>\r\n             <button type=\"button\" onClick={onClose} className=\"btn btn-secondary\">Cancel</button>\r\n           </div>\r\n         </form>\r\n       </div>\r\n     </div>\r\n   );\r\n  */\r\n}\r\n\r\nexport default AvailabilityModal;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,OAAO,QAAQ,gBAAgB,CAAC,CAAC;AAC1C,OAAO,qBAAqB;AAC5B,OAAO,4BAA4B,CAAC,CAAC;AACrC,OAAO,4BAA4B,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAErC,MAAMC,UAAU,GAAG,CAAC,QAAQ,EAAE,SAAS,EAAE,WAAW,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,EAAE,QAAQ,CAAC;AAEjG,SAASC,iBAAiBA,CAAC;EAAEC,MAAM;EAAEC,mBAAmB;EAAEC,QAAQ;EAAEC;AAAQ,CAAC,EAAE;EAAAC,EAAA;EAC7E,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC5C;;EAEA;EACAC,SAAS,CAAC,MAAM;IACd;IACA,IAAIO,mBAAmB,EAAE;MACvBK,WAAW,CAACC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACR,mBAAmB,CAAC,CAAC,CAAC,CAAC,CAAC;IAChE,CAAC,MAAM;MACJ;MACA,MAAMS,eAAe,GAAG,CAAC,CAAC;MAC1BZ,UAAU,CAACa,OAAO,CAACC,GAAG,IAAI;QACvBF,eAAe,CAACE,GAAG,CAAC,GAAG;UAAEC,SAAS,EAAE,EAAE;UAAEC,OAAO,EAAE,EAAE;UAAEC,WAAW,EAAE;QAAM,CAAC;MAC5E,CAAC,CAAC;MACFT,WAAW,CAACI,eAAe,CAAC;IAC/B;EACF,CAAC,EAAE,CAACT,mBAAmB,EAAED,MAAM,CAAC,CAAC,CAAC,CAAC;;EAEnC,MAAMgB,oBAAoB,GAAGA,CAACJ,GAAG,EAAEK,OAAO,KAAK;IAC7CX,WAAW,CAACY,IAAI,KAAK;MACnB,GAAGA,IAAI;MACP,CAACN,GAAG,GAAG;QAAE,GAAGM,IAAI,CAACN,GAAG,CAAC;QAAEG,WAAW,EAAEE;MAAQ;IAC9C,CAAC,CAAC,CAAC;EACL,CAAC;EAED,MAAME,gBAAgB,GAAGA,CAACP,GAAG,EAAEQ,QAAQ,EAAEC,KAAK,KAAK;IACjDf,WAAW,CAACY,IAAI,KAAK;MACnB,GAAGA,IAAI;MACP,CAACN,GAAG,GAAG;QAAE,GAAGM,IAAI,CAACN,GAAG,CAAC;QAAE,CAACQ,QAAQ,GAAGC;MAAM;IAC3C,CAAC,CAAC,CAAC;EACL,CAAC;;EAED;;EAEA,MAAMC,YAAY,GAAG,MAAOC,CAAC,IAAK;IAAE;IAClCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClBC,OAAO,CAACC,GAAG,CAAC,yCAAyC,EAAErB,QAAQ,CAAC;IAEhE,MAAMsB,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAI,CAACF,KAAK,EAAE;MACV;MACAF,OAAO,CAACK,KAAK,CAAC,iCAAiC,CAAC;MAChDC,KAAK,CAAC,4CAA4C,CAAC;MACnD;IACF;IAEA,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,mDAAmD,EAAE;QAChFC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,eAAe,EAAE,UAAUR,KAAK;QAClC,CAAC;QACDS,IAAI,EAAE7B,IAAI,CAACE,SAAS,CAACJ,QAAQ,CAAC,CAAC;MACjC,CAAC,CAAC;MAEF,MAAMgC,MAAM,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;MAEpC,IAAI,CAACN,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAACH,MAAM,CAACP,KAAK,IAAI,uBAAuBE,QAAQ,CAACS,MAAM,EAAE,CAAC;MAC3E;;MAEA;MACAvC,QAAQ,CAACG,QAAQ,CAAC,CAAC,CAAC;MACpB;;MAEA0B,KAAK,CAACM,MAAM,CAACK,OAAO,IAAI,oCAAoC,CAAC,CAAC,CAAC;IAEjE,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZlB,OAAO,CAACK,KAAK,CAAC,8BAA8B,EAAEa,GAAG,CAAC;MAClD;MACAZ,KAAK,CAAC,gCAAgCY,GAAG,CAACD,OAAO,EAAE,CAAC;IACtD;EACF,CAAC;EAED,IAAI,CAAC1C,MAAM,EAAE;IACX,OAAO,IAAI;EACb;;EAEA;EACA;EACA;EACA,oBACEH,OAAA;IAAK+C,KAAK,EAAE;MAAEC,QAAQ,EAAE,OAAO;MAAEC,GAAG,EAAE,KAAK;MAAEC,IAAI,EAAE,KAAK;MAAEC,OAAO,EAAE,MAAM;MAAEC,UAAU,EAAE,WAAW;MAAEC,MAAM,EAAE,iBAAiB;MAAEC,MAAM,EAAE;IAAK,CAAE;IAAAC,QAAA,GAAC,GAAC,eAC9IvD,OAAA;MAAAuD,QAAA,EAAI;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC5B3D,OAAA;MACE4D,IAAI,EAAC,MAAM;MACXC,EAAE,EAAC,iBAAiB;MACpBd,KAAK,EAAE;QAAEM,MAAM,EAAE,iBAAiB;QAAEF,OAAO,EAAE;MAAM,CAAE,CAAC;IAAA;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvD,CAAC,eACF3D,OAAA;MAAAwD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAAA3D,OAAA;MAAAwD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACZ3D,OAAA;MAAQ8D,OAAO,EAAExD,OAAQ;MAACyC,KAAK,EAAE;QAAEI,OAAO,EAAE;MAAW,CAAE;MAAAI,QAAA,EAAC;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,KAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3E,CAAC;EAER;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAACpD,EAAA,CA3JQL,iBAAiB;AAAA6D,EAAA,GAAjB7D,iBAAiB;AA6J1B,eAAeA,iBAAiB;AAAC,IAAA6D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}