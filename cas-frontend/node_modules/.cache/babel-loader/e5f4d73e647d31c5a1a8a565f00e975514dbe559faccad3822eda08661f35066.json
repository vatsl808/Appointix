{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vatsl\\\\OneDrive\\\\Desktop\\\\CAS\\\\cas-frontend\\\\src\\\\pages\\\\BookAppointmentPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport AppointmentForm from '../components/AppointmentForm';\nimport { isTimeSlotAvailable } from '../utils/availabilityUtils'; // Import validation function\nimport '../styles/appointment.css';\nimport '../styles/main.css';\n\n// Removed Mock Data definitions\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BookAppointmentPage() {\n  _s();\n  const {\n    doctorId\n  } = useParams();\n  const navigate = useNavigate();\n  const [doctor, setDoctor] = useState(null);\n  const [doctorAvailability, setDoctorAvailability] = useState(null); // State for availability\n  const [loading, setLoading] = useState(true);\n  const [bookingError, setBookingError] = useState(''); // State for booking errors\n\n  useEffect(() => {\n    // Simulate fetching doctor details and availability\n    const fetchDoctorData = () => {\n      setLoading(true);\n      setBookingError(''); // Clear error on new load\n      try {\n        const foundDoctor = mockDoctors.find(d => d.id === parseInt(doctorId));\n        if (foundDoctor) {\n          setDoctor(foundDoctor);\n          // Fetch mock availability for this doctor\n          const availability = mockDoctorAvailability[foundDoctor.id] || {\n            ...defaultAvailability\n          };\n          setDoctorAvailability(availability);\n        } else {\n          // Handle doctor not found case if needed\n          console.error('Doctor not found for booking');\n          // Optionally set an error state here\n        }\n      } catch (error) {\n        console.error('Error fetching doctor details:', error);\n        // Optionally set an error state here\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    // Simulate network delay\n    const timer = setTimeout(fetchDoctorData, 300);\n    return () => clearTimeout(timer); // Cleanup timer\n  }, [doctorId]); // Re-fetch if doctorId changes\n\n  const handleSubmit = async appointmentData => {\n    setBookingError(''); // Clear previous errors\n\n    // --- Availability Check ---\n    if (!doctorAvailability) {\n      setBookingError('Doctor availability information is not available. Cannot book.');\n      return;\n    }\n    const isAvailable = isTimeSlotAvailable(doctorAvailability, appointmentData.date, appointmentData.time);\n    if (!isAvailable) {\n      setBookingError(`Sorry, Dr. ${doctor.name} is not available at the selected time. Please choose a different time.`);\n      return; // Stop submission\n    }\n    // --- End Availability Check ---\n\n    try {\n      // TODO: Replace with actual API call\n      console.log('Booking appointment (validated):', appointmentData);\n      // Mock successful booking\n      alert('Appointment booked successfully!'); // Simple success feedback\n      navigate('/patient-dashboard');\n    } catch (error) {\n      console.error('Error booking appointment:', error);\n      setBookingError('An error occurred while booking. Please try again.');\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading doctor details...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 12\n    }, this);\n  }\n  if (!doctor) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: \"Doctor not found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 12\n    }, this);\n  }\n  return (\n    /*#__PURE__*/\n    // Use the main container class from appointment.css\n    _jsxDEV(\"div\", {\n      className: \"book-appointment-page\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"appointment-form-container\",\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"book-appointment-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Book Appointment\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 11\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"doctor-info\",\n            children: [\"with Dr. \", doctor.name, \" (\", doctor.specialization, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 9\n        }, this), bookingError && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"alert alert-danger\",\n          children: bookingError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 26\n        }, this), /*#__PURE__*/_jsxDEV(AppointmentForm, {\n          doctorId: doctorId,\n          onSubmit: handleSubmit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }, this)\n  );\n}\n_s(BookAppointmentPage, \"WJ1MSUrQhJPHiuEIHJwwJ2vukkI=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = BookAppointmentPage;\nexport default BookAppointmentPage;\nvar _c;\n$RefreshReg$(_c, \"BookAppointmentPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","AppointmentForm","isTimeSlotAvailable","jsxDEV","_jsxDEV","BookAppointmentPage","_s","doctorId","navigate","doctor","setDoctor","doctorAvailability","setDoctorAvailability","loading","setLoading","bookingError","setBookingError","fetchDoctorData","foundDoctor","mockDoctors","find","d","id","parseInt","availability","mockDoctorAvailability","defaultAvailability","console","error","timer","setTimeout","clearTimeout","handleSubmit","appointmentData","isAvailable","date","time","name","log","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","specialization","onSubmit","_c","$RefreshReg$"],"sources":["C:/Users/vatsl/OneDrive/Desktop/CAS/cas-frontend/src/pages/BookAppointmentPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport AppointmentForm from '../components/AppointmentForm';\r\nimport { isTimeSlotAvailable } from '../utils/availabilityUtils'; // Import validation function\r\nimport '../styles/appointment.css';\r\nimport '../styles/main.css';\r\n\r\n// Removed Mock Data definitions\r\n\r\nfunction BookAppointmentPage() {\r\n  const { doctorId } = useParams();\r\n  const navigate = useNavigate();\r\n  const [doctor, setDoctor] = useState(null);\r\n  const [doctorAvailability, setDoctorAvailability] = useState(null); // State for availability\r\n  const [loading, setLoading] = useState(true);\r\n  const [bookingError, setBookingError] = useState(''); // State for booking errors\r\n\r\n  useEffect(() => {\r\n    // Simulate fetching doctor details and availability\r\n    const fetchDoctorData = () => {\r\n      setLoading(true);\r\n      setBookingError(''); // Clear error on new load\r\n      try {\r\n        const foundDoctor = mockDoctors.find(d => d.id === parseInt(doctorId));\r\n        if (foundDoctor) {\r\n          setDoctor(foundDoctor);\r\n          // Fetch mock availability for this doctor\r\n          const availability = mockDoctorAvailability[foundDoctor.id] || { ...defaultAvailability };\r\n          setDoctorAvailability(availability);\r\n        } else {\r\n          // Handle doctor not found case if needed\r\n          console.error('Doctor not found for booking');\r\n          // Optionally set an error state here\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching doctor details:', error);\r\n        // Optionally set an error state here\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    // Simulate network delay\r\n    const timer = setTimeout(fetchDoctorData, 300);\r\n    return () => clearTimeout(timer); // Cleanup timer\r\n\r\n  }, [doctorId]); // Re-fetch if doctorId changes\r\n\r\n  const handleSubmit = async (appointmentData) => {\r\n    setBookingError(''); // Clear previous errors\r\n\r\n    // --- Availability Check ---\r\n    if (!doctorAvailability) {\r\n      setBookingError('Doctor availability information is not available. Cannot book.');\r\n      return;\r\n    }\r\n    const isAvailable = isTimeSlotAvailable(\r\n      doctorAvailability,\r\n      appointmentData.date,\r\n      appointmentData.time\r\n    );\r\n\r\n    if (!isAvailable) {\r\n      setBookingError(`Sorry, Dr. ${doctor.name} is not available at the selected time. Please choose a different time.`);\r\n      return; // Stop submission\r\n    }\r\n    // --- End Availability Check ---\r\n\r\n    try {\r\n      // TODO: Replace with actual API call\r\n      console.log('Booking appointment (validated):', appointmentData);\r\n      // Mock successful booking\r\n      alert('Appointment booked successfully!'); // Simple success feedback\r\n      navigate('/patient-dashboard');\r\n    } catch (error) {\r\n      console.error('Error booking appointment:', error);\r\n      setBookingError('An error occurred while booking. Please try again.');\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return <div className=\"loading\">Loading doctor details...</div>;\r\n  }\r\n\r\n  if (!doctor) {\r\n    return <div className=\"error\">Doctor not found</div>;\r\n  }\r\n\r\n  return (\r\n    // Use the main container class from appointment.css\r\n    <div className=\"book-appointment-page\">\r\n      <div className=\"appointment-form-container\"> {/* Wrap form in the styled container */}\r\n        <div className=\"book-appointment-header\">\r\n          <h2>Book Appointment</h2> {/* Use h2 for consistency */}\r\n          <p className=\"doctor-info\">\r\n            with Dr. {doctor.name} ({doctor.specialization})\r\n          </p>\r\n        </div>\r\n        {/* Display booking error message */}\r\n        {bookingError && <div className=\"alert alert-danger\">{bookingError}</div>}\r\n        <AppointmentForm doctorId={doctorId} onSubmit={handleSubmit} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BookAppointmentPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}