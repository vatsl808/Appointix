{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vatsl\\\\OneDrive\\\\Desktop\\\\CAS\\\\cas-frontend\\\\src\\\\pages\\\\PatientDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport AppointmentList from '../components/AppointmentList';\nimport EditAppointmentModal from '../components/EditAppointmentModal';\nimport '../styles/dashboard.css';\nimport '../styles/main.css';\nimport '../styles/modal.css';\n\n// Mock Availability Data (needed for EditAppointmentModal validation)\n// TODO: Refactor mock data into a shared location or fetch dynamically if needed\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultAvailability = {\n  Monday: {\n    startTime: \"09:00\",\n    endTime: \"13:00\",\n    isAvailable: true\n  },\n  Tuesday: {\n    startTime: \"09:00\",\n    endTime: \"13:00\",\n    isAvailable: true\n  },\n  Wednesday: {\n    startTime: \"09:00\",\n    endTime: \"13:00\",\n    isAvailable: true\n  },\n  Thursday: {\n    startTime: \"09:00\",\n    endTime: \"13:00\",\n    isAvailable: true\n  },\n  Friday: {\n    startTime: \"09:00\",\n    endTime: \"13:00\",\n    isAvailable: true\n  },\n  Saturday: {\n    startTime: \"10:00\",\n    endTime: \"12:00\",\n    isAvailable: false\n  },\n  Sunday: {\n    startTime: \"\",\n    endTime: \"\",\n    isAvailable: false\n  }\n};\nconst mockDoctorAvailability = {\n  1: {\n    ...defaultAvailability\n  },\n  // Dr. Smith\n  2: {\n    // Dr. Johnson\n    ...defaultAvailability,\n    Wednesday: {\n      startTime: \"14:00\",\n      endTime: \"18:00\",\n      isAvailable: true\n    },\n    Friday: {\n      startTime: \"\",\n      endTime: \"\",\n      isAvailable: false\n    }\n  },\n  3: {\n    ...defaultAvailability\n  } // Dr. Williams\n};\nfunction PatientDashboard() {\n  _s();\n  const [appointments, setAppointments] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(''); // Added error state\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n  const [appointmentToEdit, setAppointmentToEdit] = useState(null);\n  useEffect(() => {\n    const fetchAppointments = async () => {\n      setLoading(true);\n      setError(''); // Clear previous errors\n      const token = localStorage.getItem('token');\n      if (!token) {\n        setError(\"Authentication required. Please log in.\");\n        setLoading(false);\n        // Optionally redirect to login: navigate('/login');\n        return;\n      }\n      try {\n        const response = await fetch('http://localhost:5001/api/appointments/patient', {\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        if (!response.ok) {\n          const errorData = await response.json();\n          throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        // Add doctorId to fetched data if backend doesn't include it but modal needs it\n        // (Assuming backend returns doctorId now based on model)\n        setAppointments(data);\n      } catch (err) {\n        console.error('Error fetching appointments:', err);\n        setError(err.message || 'Failed to load appointments.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchAppointments();\n  }, []); // Empty dependency array means run once on mount\n\n  const handleCancel = async appointmentId => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      setError(\"Authentication required to cancel.\");\n      return;\n    }\n\n    // Optional: Confirm before cancelling\n    if (!window.confirm(\"Are you sure you want to cancel this appointment?\")) {\n      return;\n    }\n    setError(''); // Clear previous errors\n    try {\n      const response = await fetch(`http://localhost:5001/api/appointments/${appointmentId}`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      const result = await response.json();\n      if (!response.ok) {\n        throw new Error(result.error || `HTTP error! status: ${response.status}`);\n      }\n\n      // Update state to reflect cancellation (change status or remove)\n      // Option 1: Change status locally\n      setAppointments(prevAppointments => prevAppointments.map(app => app.id === appointmentId ? {\n        ...app,\n        status: 'cancelled'\n      } : app));\n      // Option 2: Remove from list locally (if you prefer not to show cancelled ones)\n      // setAppointments(prevAppointments => prevAppointments.filter(a => a.id !== appointmentId));\n\n      alert(result.message || \"Appointment cancelled successfully.\");\n    } catch (err) {\n      console.error('Error cancelling appointment:', err);\n      setError(err.message || 'Failed to cancel appointment.');\n    }\n  };\n\n  // --- Edit Modal Handlers ---\n  const handleEditRequest = appointment => {\n    console.log(\"Editing appointment:\", appointment);\n    // Ensure we have doctorId on the appointment object\n    if (!appointment.doctorId) {\n      console.error(\"Cannot edit appointment: doctorId is missing.\", appointment);\n      setError(\"Cannot edit this appointment: missing doctor information.\");\n      return;\n    }\n    setAppointmentToEdit(appointment);\n    setIsEditModalOpen(true);\n  };\n  const handleCloseEditModal = () => {\n    setIsEditModalOpen(false);\n    setAppointmentToEdit(null);\n  };\n  const handleUpdateAppointment = updatedData => {\n    // updatedData should contain { id, date, time }\n    console.log(\"Updating appointment (mock):\", updatedData);\n    // TODO: Implement API call (PUT /api/appointments/:id)\n    setAppointments(prevAppointments => prevAppointments.map(app => app.id === updatedData.id ? {\n      ...app,\n      date: updatedData.date,\n      time: updatedData.time\n    } : app));\n    handleCloseEditModal();\n    alert(\"Appointment rescheduled (mock)!\");\n  };\n  // --- End Edit Modal Handlers ---\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading appointments...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-page page-container\",\n    children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dashboard-header\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"My Dashboard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert alert-danger\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dashboard-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dashboard-section-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Upcoming & Past Appointments\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/doctors\",\n            className: \"btn btn-primary\",\n            children: \"Book New Appointment\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AppointmentList, {\n          appointments: appointments,\n          onCancel: handleCancel,\n          onEditRequest: handleEditRequest,\n          userType: \"patient\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(EditAppointmentModal, {\n        isOpen: isEditModalOpen,\n        appointment: appointmentToEdit\n        // Pass the correct availability schedule based on the doctorId of the appointment being edited\n        ,\n        doctorAvailability: appointmentToEdit ? mockDoctorAvailability[appointmentToEdit.doctorId] || defaultAvailability : null,\n        onUpdate: handleUpdateAppointment,\n        onClose: handleCloseEditModal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 5\n  }, this) // Close dashboard-page\n  ;\n}\n_s(PatientDashboard, \"FxzcuLQCmF1wV7XeUrzs7vyRG0g=\");\n_c = PatientDashboard;\nexport default PatientDashboard;\nvar _c;\n$RefreshReg$(_c, \"PatientDashboard\");","map":{"version":3,"names":["React","useState","useEffect","Link","AppointmentList","EditAppointmentModal","jsxDEV","_jsxDEV","defaultAvailability","Monday","startTime","endTime","isAvailable","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday","mockDoctorAvailability","PatientDashboard","_s","appointments","setAppointments","loading","setLoading","error","setError","isEditModalOpen","setIsEditModalOpen","appointmentToEdit","setAppointmentToEdit","fetchAppointments","token","localStorage","getItem","response","fetch","headers","ok","errorData","json","Error","status","data","err","console","message","handleCancel","appointmentId","window","confirm","method","result","prevAppointments","map","app","id","alert","handleEditRequest","appointment","log","doctorId","handleCloseEditModal","handleUpdateAppointment","updatedData","date","time","className","children","fileName","_jsxFileName","lineNumber","columnNumber","to","onCancel","onEditRequest","userType","isOpen","doctorAvailability","onUpdate","onClose","_c","$RefreshReg$"],"sources":["C:/Users/vatsl/OneDrive/Desktop/CAS/cas-frontend/src/pages/PatientDashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport AppointmentList from '../components/AppointmentList';\r\nimport EditAppointmentModal from '../components/EditAppointmentModal';\r\nimport '../styles/dashboard.css';\r\nimport '../styles/main.css';\r\nimport '../styles/modal.css';\r\n\r\n// Mock Availability Data (needed for EditAppointmentModal validation)\r\n// TODO: Refactor mock data into a shared location or fetch dynamically if needed\r\nconst defaultAvailability = {\r\n  Monday:    { startTime: \"09:00\", endTime: \"13:00\", isAvailable: true },\r\n  Tuesday:   { startTime: \"09:00\", endTime: \"13:00\", isAvailable: true },\r\n  Wednesday: { startTime: \"09:00\", endTime: \"13:00\", isAvailable: true },\r\n  Thursday:  { startTime: \"09:00\", endTime: \"13:00\", isAvailable: true },\r\n  Friday:    { startTime: \"09:00\", endTime: \"13:00\", isAvailable: true },\r\n  Saturday:  { startTime: \"10:00\", endTime: \"12:00\", isAvailable: false },\r\n  Sunday:    { startTime: \"\",      endTime: \"\",      isAvailable: false },\r\n};\r\nconst mockDoctorAvailability = {\r\n  1: { ...defaultAvailability }, // Dr. Smith\r\n  2: { // Dr. Johnson\r\n    ...defaultAvailability,\r\n    Wednesday: { startTime: \"14:00\", endTime: \"18:00\", isAvailable: true },\r\n    Friday:    { startTime: \"\", endTime: \"\", isAvailable: false },\r\n  },\r\n  3: { ...defaultAvailability }, // Dr. Williams\r\n};\r\n\r\n\r\nfunction PatientDashboard() {\r\n  const [appointments, setAppointments] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(''); // Added error state\r\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\r\n  const [appointmentToEdit, setAppointmentToEdit] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchAppointments = async () => {\r\n      setLoading(true);\r\n      setError(''); // Clear previous errors\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        setError(\"Authentication required. Please log in.\");\r\n        setLoading(false);\r\n        // Optionally redirect to login: navigate('/login');\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const response = await fetch('http://localhost:5001/api/appointments/patient', {\r\n          headers: {\r\n            'Authorization': `Bearer ${token}`\r\n          }\r\n        });\r\n\r\n        if (!response.ok) {\r\n          const errorData = await response.json();\r\n          throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n        // Add doctorId to fetched data if backend doesn't include it but modal needs it\r\n        // (Assuming backend returns doctorId now based on model)\r\n        setAppointments(data);\r\n\r\n      } catch (err) {\r\n        console.error('Error fetching appointments:', err);\r\n        setError(err.message || 'Failed to load appointments.');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchAppointments();\r\n  }, []); // Empty dependency array means run once on mount\r\n\r\n  const handleCancel = async (appointmentId) => {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n      setError(\"Authentication required to cancel.\");\r\n      return;\r\n    }\r\n\r\n    // Optional: Confirm before cancelling\r\n    if (!window.confirm(\"Are you sure you want to cancel this appointment?\")) {\r\n      return;\r\n    }\r\n\r\n    setError(''); // Clear previous errors\r\n    try {\r\n      const response = await fetch(`http://localhost:5001/api/appointments/${appointmentId}`, {\r\n        method: 'DELETE',\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`\r\n        }\r\n      });\r\n\r\n      const result = await response.json();\r\n\r\n      if (!response.ok) {\r\n        throw new Error(result.error || `HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      // Update state to reflect cancellation (change status or remove)\r\n      // Option 1: Change status locally\r\n      setAppointments(prevAppointments =>\r\n        prevAppointments.map(app =>\r\n          app.id === appointmentId ? { ...app, status: 'cancelled' } : app\r\n        )\r\n      );\r\n      // Option 2: Remove from list locally (if you prefer not to show cancelled ones)\r\n      // setAppointments(prevAppointments => prevAppointments.filter(a => a.id !== appointmentId));\r\n\r\n      alert(result.message || \"Appointment cancelled successfully.\");\r\n\r\n    } catch (err) {\r\n      console.error('Error cancelling appointment:', err);\r\n      setError(err.message || 'Failed to cancel appointment.');\r\n    }\r\n  };\r\n\r\n  // --- Edit Modal Handlers ---\r\n  const handleEditRequest = (appointment) => {\r\n    console.log(\"Editing appointment:\", appointment);\r\n    // Ensure we have doctorId on the appointment object\r\n    if (!appointment.doctorId) {\r\n        console.error(\"Cannot edit appointment: doctorId is missing.\", appointment);\r\n        setError(\"Cannot edit this appointment: missing doctor information.\");\r\n        return;\r\n    }\r\n    setAppointmentToEdit(appointment);\r\n    setIsEditModalOpen(true);\r\n  };\r\n\r\n  const handleCloseEditModal = () => {\r\n    setIsEditModalOpen(false);\r\n    setAppointmentToEdit(null);\r\n  };\r\n\r\n  const handleUpdateAppointment = (updatedData) => {\r\n    // updatedData should contain { id, date, time }\r\n    console.log(\"Updating appointment (mock):\", updatedData);\r\n    // TODO: Implement API call (PUT /api/appointments/:id)\r\n    setAppointments(prevAppointments =>\r\n      prevAppointments.map(app =>\r\n        app.id === updatedData.id\r\n          ? { ...app, date: updatedData.date, time: updatedData.time }\r\n          : app\r\n      )\r\n    );\r\n    handleCloseEditModal();\r\n    alert(\"Appointment rescheduled (mock)!\");\r\n  };\r\n  // --- End Edit Modal Handlers ---\r\n\r\n\r\n  if (loading) {\r\n    return <div className=\"loading\">Loading appointments...</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"dashboard-page page-container\"> {/* Added page-container */}\r\n      <div className=\"container\"> {/* Added container */}\r\n        <div className=\"dashboard-header\">\r\n          <h2>My Dashboard</h2>\r\n        </div>\r\n\r\n        {/* Display error if any */}\r\n        {error && <div className=\"alert alert-danger\">{error}</div>}\r\n\r\n        <div className=\"dashboard-section\">\r\n          <div className=\"dashboard-section-header\">\r\n            <h3>Upcoming & Past Appointments</h3>\r\n            <Link to=\"/doctors\" className=\"btn btn-primary\">\r\n              Book New Appointment\r\n            </Link>\r\n          </div>\r\n          <AppointmentList\r\n            appointments={appointments}\r\n            onCancel={handleCancel}\r\n            onEditRequest={handleEditRequest}\r\n            userType=\"patient\"\r\n          />\r\n        </div>\r\n\r\n        {/* Render the Edit Modal */}\r\n        <EditAppointmentModal\r\n          isOpen={isEditModalOpen}\r\n          appointment={appointmentToEdit}\r\n          // Pass the correct availability schedule based on the doctorId of the appointment being edited\r\n          doctorAvailability={appointmentToEdit ? (mockDoctorAvailability[appointmentToEdit.doctorId] || defaultAvailability) : null}\r\n          onUpdate={handleUpdateAppointment}\r\n          onClose={handleCloseEditModal}\r\n        />\r\n      </div> {/* Close container */}\r\n    </div> // Close dashboard-page\r\n  );\r\n}\r\n\r\nexport default PatientDashboard;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,IAAI,QAAQ,kBAAkB;AACvC,OAAOC,eAAe,MAAM,+BAA+B;AAC3D,OAAOC,oBAAoB,MAAM,oCAAoC;AACrE,OAAO,yBAAyB;AAChC,OAAO,oBAAoB;AAC3B,OAAO,qBAAqB;;AAE5B;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,mBAAmB,GAAG;EAC1BC,MAAM,EAAK;IAAEC,SAAS,EAAE,OAAO;IAAEC,OAAO,EAAE,OAAO;IAAEC,WAAW,EAAE;EAAK,CAAC;EACtEC,OAAO,EAAI;IAAEH,SAAS,EAAE,OAAO;IAAEC,OAAO,EAAE,OAAO;IAAEC,WAAW,EAAE;EAAK,CAAC;EACtEE,SAAS,EAAE;IAAEJ,SAAS,EAAE,OAAO;IAAEC,OAAO,EAAE,OAAO;IAAEC,WAAW,EAAE;EAAK,CAAC;EACtEG,QAAQ,EAAG;IAAEL,SAAS,EAAE,OAAO;IAAEC,OAAO,EAAE,OAAO;IAAEC,WAAW,EAAE;EAAK,CAAC;EACtEI,MAAM,EAAK;IAAEN,SAAS,EAAE,OAAO;IAAEC,OAAO,EAAE,OAAO;IAAEC,WAAW,EAAE;EAAK,CAAC;EACtEK,QAAQ,EAAG;IAAEP,SAAS,EAAE,OAAO;IAAEC,OAAO,EAAE,OAAO;IAAEC,WAAW,EAAE;EAAM,CAAC;EACvEM,MAAM,EAAK;IAAER,SAAS,EAAE,EAAE;IAAOC,OAAO,EAAE,EAAE;IAAOC,WAAW,EAAE;EAAM;AACxE,CAAC;AACD,MAAMO,sBAAsB,GAAG;EAC7B,CAAC,EAAE;IAAE,GAAGX;EAAoB,CAAC;EAAE;EAC/B,CAAC,EAAE;IAAE;IACH,GAAGA,mBAAmB;IACtBM,SAAS,EAAE;MAAEJ,SAAS,EAAE,OAAO;MAAEC,OAAO,EAAE,OAAO;MAAEC,WAAW,EAAE;IAAK,CAAC;IACtEI,MAAM,EAAK;MAAEN,SAAS,EAAE,EAAE;MAAEC,OAAO,EAAE,EAAE;MAAEC,WAAW,EAAE;IAAM;EAC9D,CAAC;EACD,CAAC,EAAE;IAAE,GAAGJ;EAAoB,CAAC,CAAE;AACjC,CAAC;AAGD,SAASY,gBAAgBA,CAAA,EAAG;EAAAC,EAAA;EAC1B,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACuB,OAAO,EAAEC,UAAU,CAAC,GAAGxB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACyB,KAAK,EAAEC,QAAQ,CAAC,GAAG1B,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACxC,MAAM,CAAC2B,eAAe,EAAEC,kBAAkB,CAAC,GAAG5B,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAM,CAAC6B,iBAAiB,EAAEC,oBAAoB,CAAC,GAAG9B,QAAQ,CAAC,IAAI,CAAC;EAEhEC,SAAS,CAAC,MAAM;IACd,MAAM8B,iBAAiB,GAAG,MAAAA,CAAA,KAAY;MACpCP,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;MACd,MAAMM,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,IAAI,CAACF,KAAK,EAAE;QACVN,QAAQ,CAAC,yCAAyC,CAAC;QACnDF,UAAU,CAAC,KAAK,CAAC;QACjB;QACA;MACF;MAEA,IAAI;QACF,MAAMW,QAAQ,GAAG,MAAMC,KAAK,CAAC,gDAAgD,EAAE;UAC7EC,OAAO,EAAE;YACP,eAAe,EAAE,UAAUL,KAAK;UAClC;QACF,CAAC,CAAC;QAEF,IAAI,CAACG,QAAQ,CAACG,EAAE,EAAE;UAChB,MAAMC,SAAS,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;UACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACd,KAAK,IAAI,uBAAuBU,QAAQ,CAACO,MAAM,EAAE,CAAC;QAC9E;QAEA,MAAMC,IAAI,GAAG,MAAMR,QAAQ,CAACK,IAAI,CAAC,CAAC;QAClC;QACA;QACAlB,eAAe,CAACqB,IAAI,CAAC;MAEvB,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZC,OAAO,CAACpB,KAAK,CAAC,8BAA8B,EAAEmB,GAAG,CAAC;QAClDlB,QAAQ,CAACkB,GAAG,CAACE,OAAO,IAAI,8BAA8B,CAAC;MACzD,CAAC,SAAS;QACRtB,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDO,iBAAiB,CAAC,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,MAAMgB,YAAY,GAAG,MAAOC,aAAa,IAAK;IAC5C,MAAMhB,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAI,CAACF,KAAK,EAAE;MACVN,QAAQ,CAAC,oCAAoC,CAAC;MAC9C;IACF;;IAEA;IACA,IAAI,CAACuB,MAAM,CAACC,OAAO,CAAC,mDAAmD,CAAC,EAAE;MACxE;IACF;IAEAxB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;IACd,IAAI;MACF,MAAMS,QAAQ,GAAG,MAAMC,KAAK,CAAC,0CAA0CY,aAAa,EAAE,EAAE;QACtFG,MAAM,EAAE,QAAQ;QAChBd,OAAO,EAAE;UACP,eAAe,EAAE,UAAUL,KAAK;QAClC;MACF,CAAC,CAAC;MAEF,MAAMoB,MAAM,GAAG,MAAMjB,QAAQ,CAACK,IAAI,CAAC,CAAC;MAEpC,IAAI,CAACL,QAAQ,CAACG,EAAE,EAAE;QAChB,MAAM,IAAIG,KAAK,CAACW,MAAM,CAAC3B,KAAK,IAAI,uBAAuBU,QAAQ,CAACO,MAAM,EAAE,CAAC;MAC3E;;MAEA;MACA;MACApB,eAAe,CAAC+B,gBAAgB,IAC9BA,gBAAgB,CAACC,GAAG,CAACC,GAAG,IACtBA,GAAG,CAACC,EAAE,KAAKR,aAAa,GAAG;QAAE,GAAGO,GAAG;QAAEb,MAAM,EAAE;MAAY,CAAC,GAAGa,GAC/D,CACF,CAAC;MACD;MACA;;MAEAE,KAAK,CAACL,MAAM,CAACN,OAAO,IAAI,qCAAqC,CAAC;IAEhE,CAAC,CAAC,OAAOF,GAAG,EAAE;MACZC,OAAO,CAACpB,KAAK,CAAC,+BAA+B,EAAEmB,GAAG,CAAC;MACnDlB,QAAQ,CAACkB,GAAG,CAACE,OAAO,IAAI,+BAA+B,CAAC;IAC1D;EACF,CAAC;;EAED;EACA,MAAMY,iBAAiB,GAAIC,WAAW,IAAK;IACzCd,OAAO,CAACe,GAAG,CAAC,sBAAsB,EAAED,WAAW,CAAC;IAChD;IACA,IAAI,CAACA,WAAW,CAACE,QAAQ,EAAE;MACvBhB,OAAO,CAACpB,KAAK,CAAC,+CAA+C,EAAEkC,WAAW,CAAC;MAC3EjC,QAAQ,CAAC,2DAA2D,CAAC;MACrE;IACJ;IACAI,oBAAoB,CAAC6B,WAAW,CAAC;IACjC/B,kBAAkB,CAAC,IAAI,CAAC;EAC1B,CAAC;EAED,MAAMkC,oBAAoB,GAAGA,CAAA,KAAM;IACjClC,kBAAkB,CAAC,KAAK,CAAC;IACzBE,oBAAoB,CAAC,IAAI,CAAC;EAC5B,CAAC;EAED,MAAMiC,uBAAuB,GAAIC,WAAW,IAAK;IAC/C;IACAnB,OAAO,CAACe,GAAG,CAAC,8BAA8B,EAAEI,WAAW,CAAC;IACxD;IACA1C,eAAe,CAAC+B,gBAAgB,IAC9BA,gBAAgB,CAACC,GAAG,CAACC,GAAG,IACtBA,GAAG,CAACC,EAAE,KAAKQ,WAAW,CAACR,EAAE,GACrB;MAAE,GAAGD,GAAG;MAAEU,IAAI,EAAED,WAAW,CAACC,IAAI;MAAEC,IAAI,EAAEF,WAAW,CAACE;IAAK,CAAC,GAC1DX,GACN,CACF,CAAC;IACDO,oBAAoB,CAAC,CAAC;IACtBL,KAAK,CAAC,iCAAiC,CAAC;EAC1C,CAAC;EACD;;EAGA,IAAIlC,OAAO,EAAE;IACX,oBAAOjB,OAAA;MAAK6D,SAAS,EAAC,SAAS;MAAAC,QAAA,EAAC;IAAuB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC/D;EAEA,oBACElE,OAAA;IAAK6D,SAAS,EAAC,+BAA+B;IAAAC,QAAA,GAAC,GAAC,eAC9C9D,OAAA;MAAK6D,SAAS,EAAC,WAAW;MAAAC,QAAA,GAAC,GAAC,eAC1B9D,OAAA;QAAK6D,SAAS,EAAC,kBAAkB;QAAAC,QAAA,eAC/B9D,OAAA;UAAA8D,QAAA,EAAI;QAAY;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClB,CAAC,EAGL/C,KAAK,iBAAInB,OAAA;QAAK6D,SAAS,EAAC,oBAAoB;QAAAC,QAAA,EAAE3C;MAAK;QAAA4C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eAE3DlE,OAAA;QAAK6D,SAAS,EAAC,mBAAmB;QAAAC,QAAA,gBAChC9D,OAAA;UAAK6D,SAAS,EAAC,0BAA0B;UAAAC,QAAA,gBACvC9D,OAAA;YAAA8D,QAAA,EAAI;UAA4B;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACrClE,OAAA,CAACJ,IAAI;YAACuE,EAAE,EAAC,UAAU;YAACN,SAAS,EAAC,iBAAiB;YAAAC,QAAA,EAAC;UAEhD;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACJ,CAAC,eACNlE,OAAA,CAACH,eAAe;UACdkB,YAAY,EAAEA,YAAa;UAC3BqD,QAAQ,EAAE3B,YAAa;UACvB4B,aAAa,EAAEjB,iBAAkB;UACjCkB,QAAQ,EAAC;QAAS;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACnB,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eAGNlE,OAAA,CAACF,oBAAoB;QACnByE,MAAM,EAAElD,eAAgB;QACxBgC,WAAW,EAAE9B;QACb;QAAA;QACAiD,kBAAkB,EAAEjD,iBAAiB,GAAIX,sBAAsB,CAACW,iBAAiB,CAACgC,QAAQ,CAAC,IAAItD,mBAAmB,GAAI,IAAK;QAC3HwE,QAAQ,EAAEhB,uBAAwB;QAClCiB,OAAO,EAAElB;MAAqB;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/B,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,KAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC,CAAC;EAAA;AAEX;AAACpD,EAAA,CAxKQD,gBAAgB;AAAA8D,EAAA,GAAhB9D,gBAAgB;AA0KzB,eAAeA,gBAAgB;AAAC,IAAA8D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}