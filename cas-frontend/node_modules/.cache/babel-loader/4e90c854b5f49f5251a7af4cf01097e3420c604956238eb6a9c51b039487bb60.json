{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vatsl\\\\OneDrive\\\\Desktop\\\\CAS\\\\cas-frontend\\\\src\\\\pages\\\\DoctorProfilePage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { FaUserMd } from 'react-icons/fa';\nimport AppointmentList from '../components/AppointmentList';\nimport AvailabilityModal from '../components/AvailabilityModal';\nimport EditProfileModal from '../components/EditProfileModal';\nimport '../styles/profile.css';\nimport '../styles/main.css';\nimport '../styles/availability.css';\nimport '../styles/modal.css';\n\n// No more mock data here\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DoctorProfilePage() {\n  _s();\n  const {\n    id\n  } = useParams(); // Get doctor ID from URL\n  const [doctor, setDoctor] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [profilePicPreview, setProfilePicPreview] = useState(null);\n  const [profilePicFile, setProfilePicFile] = useState(null);\n  const [appointmentHistory, setAppointmentHistory] = useState([]); // Will be fetched later\n  const [doctorAvailability, setDoctorAvailability] = useState(null); // Fetched with doctor details\n  const [isAvailabilityModalOpen, setIsAvailabilityModalOpen] = useState(false);\n  const [isEditProfileModalOpen, setIsEditProfileModalOpen] = useState(false);\n  useEffect(() => {\n    const fetchDoctorProfile = async () => {\n      setLoading(true);\n      setError('');\n      try {\n        // Fetch doctor details (including availability) from backend\n        const response = await fetch(`http://localhost:5001/api/doctors/${id}`);\n        if (!response.ok) {\n          const errorData = await response.json();\n          throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        setDoctor(data);\n        setDoctorAvailability(data.availability);\n\n        // Now fetch appointment history for this doctor (requires auth)\n        const token = localStorage.getItem('token');\n        if (token) {\n          // Only fetch history if logged in (though profile might be public)\n          const historyResponse = await fetch(`http://localhost:5001/api/appointments/doctor`, {\n            // Assuming this endpoint gets appointments for the LOGGED IN doctor\n            headers: {\n              'Authorization': `Bearer ${token}`\n            }\n            // NOTE: This fetches the LOGGED IN doctor's history, not necessarily the profile being viewed if they differ.\n            // A different endpoint might be needed like /api/doctors/:id/appointments if viewing other profiles.\n            // For now, we assume viewing own profile or this endpoint returns based on doctor_id if provided?\n            // Let's stick to fetching the logged-in doctor's history for simplicity.\n          });\n          if (historyResponse.ok) {\n            const historyData = await historyResponse.json();\n            // Filter history based on the profile ID being viewed, ONLY if backend doesn't do it.\n            // This assumes the /api/appointments/doctor returns ALL appointments for the logged-in doc.\n            // A better backend would filter by doctor_id if provided.\n            // The backend endpoint /api/appointments/doctor already returns appointments\n            // only for the logged-in doctor based on the token. No local filtering needed here.\n            setAppointmentHistory(historyData);\n          } else {\n            console.error(\"Failed to fetch appointment history\");\n            // Don't necessarily set main error, maybe just log or show history error\n          }\n        } else {\n          console.warn(\"No token found, cannot fetch appointment history.\");\n          // Leave history empty if not logged in or no token\n          setAppointmentHistory([]);\n        }\n      } catch (err) {\n        console.error('Error fetching doctor profile:', err);\n        setError(err.message || 'Failed to load doctor profile.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchDoctorProfile();\n  }, [id]); // Re-fetch if ID changes\n\n  // --- Handlers ---\n  const handleProfilePicChange = event => {\n    const file = event.target.files[0];\n    if (file && file.type.startsWith('image/')) {\n      setProfilePicFile(file);\n      const reader = new FileReader();\n      reader.onloadend = () => setProfilePicPreview(reader.result);\n      reader.readAsDataURL(file);\n    } else {\n      setProfilePicFile(null);\n      setProfilePicPreview(null);\n    }\n  };\n\n  // --- Profile Edit Modal Handlers ---\n  const handleOpenEditProfileModal = () => {\n    setProfilePicPreview(null); // Reset preview\n    setProfilePicFile(null);\n    setIsEditProfileModalOpen(true);\n  };\n  const handleCloseEditProfileModal = () => {\n    setIsEditProfileModalOpen(false);\n  };\n  const handleUpdateProfile = updatedProfileData => {\n    // updatedProfileData contains { phone, bio }\n    console.log(\"Updating profile data (mock):\", {\n      ...updatedProfileData,\n      pictureFile: profilePicFile ? profilePicFile.name : 'No new picture'\n    });\n\n    // TODO: Implement actual API call (PUT /api/doctors/me/profile)\n    // For now, just update local state for display\n    const updatedDoctor = {\n      ...doctor,\n      phone: updatedProfileData.phone,\n      bio: updatedProfileData.bio,\n      // If a picture was previewed, update the display URL (won't persist without backend)\n      profilePictureUrl: profilePicPreview || doctor.profilePictureUrl\n    };\n    setDoctor(updatedDoctor);\n    handleCloseEditProfileModal();\n    setProfilePicPreview(null);\n    setProfilePicFile(null);\n    alert(\"Profile updated (mock)!\"); // Mock success feedback\n  };\n  // --- End Profile Edit Modal Handlers ---\n\n  // --- Availability Modal Handlers ---\n  const handleOpenAvailabilityModal = () => {\n    setIsAvailabilityModalOpen(true);\n  };\n  const handleCloseAvailabilityModal = () => {\n    setIsAvailabilityModalOpen(false);\n  };\n  const handleUpdateAvailability = newAvailability => {\n    console.log(\"Updating availability (mock):\", newAvailability);\n    // TODO: Implement actual API call (PUT /api/doctors/me/availability)\n    setDoctorAvailability(newAvailability); // Update state locally\n    // Update the main doctor state as well so it persists on page if needed\n    setDoctor(prev => ({\n      ...prev,\n      availability: newAvailability\n    }));\n    handleCloseAvailabilityModal();\n    alert(\"Availability updated (mock)!\"); // Mock success feedback\n  };\n  // --- End Availability Modal Handlers ---\n\n  // --- Render Logic ---\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading\",\n    children: \"Loading doctor profile...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container page-container error\",\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 21\n  }, this);\n  if (!doctor) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container page-container\",\n    children: \"Doctor data unavailable.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 23\n  }, this);\n  const displayImageUrl = profilePicPreview || doctor.profilePictureUrl;\n  return (\n    /*#__PURE__*/\n    // Apply page-level padding first\n    _jsxDEV(\"div\", {\n      className: \"profile-page page-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Doctor Profile\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profile-section profile-header-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profile-picture-container\",\n            children: displayImageUrl ? /*#__PURE__*/_jsxDEV(\"img\", {\n              src: displayImageUrl,\n              alt: `${doctor.name}'s profile`,\n              className: \"profile-picture\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 13\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"profile-picture-placeholder\",\n              children: /*#__PURE__*/_jsxDEV(FaUserMd, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 173,\n                columnNumber: 58\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profile-header-details\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: doctor.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"profile-specialization\",\n              children: doctor.specialization\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"profile-email\",\n              children: /*#__PURE__*/_jsxDEV(\"a\", {\n                href: `mailto:${doctor.email}`,\n                children: doctor.email\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 189,\n                columnNumber: 13\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"profile-details\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"detail-item\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  children: \"Phone:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 194,\n                  columnNumber: 15\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: doctor.phone || 'Not Provided'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 195,\n                  columnNumber: 15\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 193,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"detail-item\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  children: \"Bio:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 198,\n                  columnNumber: 15\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: doctor.bio || 'Not Provided'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 199,\n                  columnNumber: 15\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 197,\n                columnNumber: 13\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"profile-actions\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: handleOpenEditProfileModal,\n                className: \"btn btn-secondary btn-sm\",\n                children: \"Edit Profile\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 204,\n                columnNumber: 14\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: handleOpenAvailabilityModal,\n                className: \"btn btn-secondary btn-sm\",\n                children: \"Set Availability\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 205,\n                columnNumber: 14\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profile-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"profile-section-header\",\n            children: /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Appointment History\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(AppointmentList\n          // Filter the history to only show completed appointments\n          , {\n            appointments: appointmentHistory.filter(appt => appt.status === 'completed'),\n            userType: \"doctor\",\n            onComplete: () => {} // Placeholder - No action needed in history view\n            ,\n            onCancel: () => {} // Placeholder\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(AvailabilityModal, {\n          isOpen: isAvailabilityModalOpen,\n          currentAvailability: doctorAvailability // Pass fetched/updated availability\n          ,\n          onUpdate: handleUpdateAvailability,\n          onClose: handleCloseAvailabilityModal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(EditProfileModal, {\n          isOpen: isEditProfileModalOpen,\n          currentPhone: doctor.phone,\n          currentBio: doctor.bio,\n          onUpdate: handleUpdateProfile,\n          onClose: handleCloseEditProfileModal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 7\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 5\n    }, this) // Close profile-page\n  );\n}\n_s(DoctorProfilePage, \"jUZ7rtMwMhjwGVRp/eaj70WkpG8=\", false, function () {\n  return [useParams];\n});\n_c = DoctorProfilePage;\nexport default DoctorProfilePage;\nvar _c;\n$RefreshReg$(_c, \"DoctorProfilePage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","FaUserMd","AppointmentList","AvailabilityModal","EditProfileModal","jsxDEV","_jsxDEV","DoctorProfilePage","_s","id","doctor","setDoctor","loading","setLoading","error","setError","profilePicPreview","setProfilePicPreview","profilePicFile","setProfilePicFile","appointmentHistory","setAppointmentHistory","doctorAvailability","setDoctorAvailability","isAvailabilityModalOpen","setIsAvailabilityModalOpen","isEditProfileModalOpen","setIsEditProfileModalOpen","fetchDoctorProfile","response","fetch","ok","errorData","json","Error","status","data","availability","token","localStorage","getItem","historyResponse","headers","historyData","console","warn","err","message","handleProfilePicChange","event","file","target","files","type","startsWith","reader","FileReader","onloadend","result","readAsDataURL","handleOpenEditProfileModal","handleCloseEditProfileModal","handleUpdateProfile","updatedProfileData","log","pictureFile","name","updatedDoctor","phone","bio","profilePictureUrl","alert","handleOpenAvailabilityModal","handleCloseAvailabilityModal","handleUpdateAvailability","newAvailability","prev","className","children","fileName","_jsxFileName","lineNumber","columnNumber","displayImageUrl","src","alt","specialization","href","email","onClick","appointments","filter","appt","userType","onComplete","onCancel","isOpen","currentAvailability","onUpdate","onClose","currentPhone","currentBio","_c","$RefreshReg$"],"sources":["C:/Users/vatsl/OneDrive/Desktop/CAS/cas-frontend/src/pages/DoctorProfilePage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { FaUserMd } from 'react-icons/fa';\r\nimport AppointmentList from '../components/AppointmentList';\r\nimport AvailabilityModal from '../components/AvailabilityModal';\r\nimport EditProfileModal from '../components/EditProfileModal';\r\nimport '../styles/profile.css';\r\nimport '../styles/main.css';\r\nimport '../styles/availability.css';\r\nimport '../styles/modal.css';\r\n\r\n// No more mock data here\r\n\r\nfunction DoctorProfilePage() {\r\n  const { id } = useParams(); // Get doctor ID from URL\r\n  const [doctor, setDoctor] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n  const [profilePicPreview, setProfilePicPreview] = useState(null);\r\n  const [profilePicFile, setProfilePicFile] = useState(null);\r\n  const [appointmentHistory, setAppointmentHistory] = useState([]); // Will be fetched later\r\n  const [doctorAvailability, setDoctorAvailability] = useState(null); // Fetched with doctor details\r\n  const [isAvailabilityModalOpen, setIsAvailabilityModalOpen] = useState(false);\r\n  const [isEditProfileModalOpen, setIsEditProfileModalOpen] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchDoctorProfile = async () => {\r\n      setLoading(true);\r\n      setError('');\r\n      try {\r\n        // Fetch doctor details (including availability) from backend\r\n        const response = await fetch(`http://localhost:5001/api/doctors/${id}`);\r\n        if (!response.ok) {\r\n          const errorData = await response.json();\r\n          throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\r\n        }\r\n        const data = await response.json();\r\n        setDoctor(data);\r\n        setDoctorAvailability(data.availability);\r\n\r\n        // Now fetch appointment history for this doctor (requires auth)\r\n        const token = localStorage.getItem('token');\r\n        if (token) { // Only fetch history if logged in (though profile might be public)\r\n            const historyResponse = await fetch(`http://localhost:5001/api/appointments/doctor`, { // Assuming this endpoint gets appointments for the LOGGED IN doctor\r\n                 headers: { 'Authorization': `Bearer ${token}` }\r\n                 // NOTE: This fetches the LOGGED IN doctor's history, not necessarily the profile being viewed if they differ.\r\n                 // A different endpoint might be needed like /api/doctors/:id/appointments if viewing other profiles.\r\n                 // For now, we assume viewing own profile or this endpoint returns based on doctor_id if provided?\r\n                 // Let's stick to fetching the logged-in doctor's history for simplicity.\r\n            });\r\n            if (historyResponse.ok) {\r\n                const historyData = await historyResponse.json();\r\n                // Filter history based on the profile ID being viewed, ONLY if backend doesn't do it.\r\n                // This assumes the /api/appointments/doctor returns ALL appointments for the logged-in doc.\r\n                // A better backend would filter by doctor_id if provided.\r\n                // The backend endpoint /api/appointments/doctor already returns appointments\r\n                // only for the logged-in doctor based on the token. No local filtering needed here.\r\n                setAppointmentHistory(historyData);\r\n\r\n            } else {\r\n                 console.error(\"Failed to fetch appointment history\");\r\n                 // Don't necessarily set main error, maybe just log or show history error\r\n            }\r\n        } else {\r\n             console.warn(\"No token found, cannot fetch appointment history.\");\r\n             // Leave history empty if not logged in or no token\r\n             setAppointmentHistory([]);\r\n        }\r\n\r\n\r\n      } catch (err) {\r\n        console.error('Error fetching doctor profile:', err);\r\n        setError(err.message || 'Failed to load doctor profile.');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchDoctorProfile();\r\n  }, [id]); // Re-fetch if ID changes\r\n\r\n  // --- Handlers ---\r\n  const handleProfilePicChange = (event) => {\r\n    const file = event.target.files[0];\r\n    if (file && file.type.startsWith('image/')) {\r\n      setProfilePicFile(file);\r\n      const reader = new FileReader();\r\n      reader.onloadend = () => setProfilePicPreview(reader.result);\r\n      reader.readAsDataURL(file);\r\n    } else {\r\n      setProfilePicFile(null);\r\n      setProfilePicPreview(null);\r\n    }\r\n  };\r\n\r\n  // --- Profile Edit Modal Handlers ---\r\n  const handleOpenEditProfileModal = () => {\r\n    setProfilePicPreview(null); // Reset preview\r\n    setProfilePicFile(null);\r\n    setIsEditProfileModalOpen(true);\r\n  };\r\n\r\n  const handleCloseEditProfileModal = () => {\r\n    setIsEditProfileModalOpen(false);\r\n  };\r\n\r\n  const handleUpdateProfile = (updatedProfileData) => {\r\n    // updatedProfileData contains { phone, bio }\r\n    console.log(\"Updating profile data (mock):\", {\r\n      ...updatedProfileData,\r\n      pictureFile: profilePicFile ? profilePicFile.name : 'No new picture'\r\n    });\r\n\r\n    // TODO: Implement actual API call (PUT /api/doctors/me/profile)\r\n    // For now, just update local state for display\r\n    const updatedDoctor = {\r\n      ...doctor,\r\n      phone: updatedProfileData.phone,\r\n      bio: updatedProfileData.bio,\r\n      // If a picture was previewed, update the display URL (won't persist without backend)\r\n      profilePictureUrl: profilePicPreview || doctor.profilePictureUrl\r\n    };\r\n    setDoctor(updatedDoctor);\r\n\r\n    handleCloseEditProfileModal();\r\n    setProfilePicPreview(null);\r\n    setProfilePicFile(null);\r\n    alert(\"Profile updated (mock)!\"); // Mock success feedback\r\n  };\r\n  // --- End Profile Edit Modal Handlers ---\r\n\r\n\r\n  // --- Availability Modal Handlers ---\r\n  const handleOpenAvailabilityModal = () => {\r\n    setIsAvailabilityModalOpen(true);\r\n  };\r\n\r\n  const handleCloseAvailabilityModal = () => {\r\n    setIsAvailabilityModalOpen(false);\r\n  };\r\n\r\n  const handleUpdateAvailability = (newAvailability) => {\r\n    console.log(\"Updating availability (mock):\", newAvailability);\r\n    // TODO: Implement actual API call (PUT /api/doctors/me/availability)\r\n    setDoctorAvailability(newAvailability); // Update state locally\r\n    // Update the main doctor state as well so it persists on page if needed\r\n    setDoctor(prev => ({ ...prev, availability: newAvailability }));\r\n    handleCloseAvailabilityModal();\r\n    alert(\"Availability updated (mock)!\"); // Mock success feedback\r\n  };\r\n  // --- End Availability Modal Handlers ---\r\n\r\n  // --- Render Logic ---\r\n  if (loading) return <div className=\"loading\">Loading doctor profile...</div>;\r\n  if (error) return <div className=\"container page-container error\">{error}</div>;\r\n  if (!doctor) return <div className=\"container page-container\">Doctor data unavailable.</div>;\r\n\r\n  const displayImageUrl = profilePicPreview || doctor.profilePictureUrl;\r\n\r\n  return (\r\n    // Apply page-level padding first\r\n    <div className=\"profile-page page-container\">\r\n      {/* Then apply container to center content */}\r\n      <div className=\"container\">\r\n        <h1>Doctor Profile</h1>\r\n\r\n        {/* Combined Details Section */}\r\n      <div className=\"profile-section profile-header-section\">\r\n        <div className=\"profile-picture-container\">\r\n          {displayImageUrl ? (\r\n            <img src={displayImageUrl} alt={`${doctor.name}'s profile`} className=\"profile-picture\" />\r\n          ) : (\r\n            <div className=\"profile-picture-placeholder\"><FaUserMd /></div>\r\n          )}\r\n          {/* TODO: Add actual picture upload logic later */}\r\n          {/* <label htmlFor=\"profilePicInput\" className=\"btn btn-secondary btn-sm upload-btn\">\r\n            {displayImageUrl ? 'Change Picture' : 'Upload Picture'}\r\n          </label>\r\n          <input\r\n            type=\"file\" id=\"profilePicInput\" accept=\"image/*\"\r\n            onChange={handleProfilePicChange} style={{ display: 'none' }}\r\n          /> */}\r\n        </div>\r\n\r\n        <div className=\"profile-header-details\">\r\n          <h2>{doctor.name}</h2>\r\n          <p className=\"profile-specialization\">{doctor.specialization}</p>\r\n          <p className=\"profile-email\">\r\n            <a href={`mailto:${doctor.email}`}>{doctor.email}</a>\r\n          </p>\r\n\r\n          <div className=\"profile-details\">\r\n            <div className=\"detail-item\">\r\n              <label>Phone:</label>\r\n              <p>{doctor.phone || 'Not Provided'}</p>\r\n            </div>\r\n            <div className=\"detail-item\">\r\n              <label>Bio:</label>\r\n              <p>{doctor.bio || 'Not Provided'}</p>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"profile-actions\">\r\n             <button onClick={handleOpenEditProfileModal} className=\"btn btn-secondary btn-sm\">Edit Profile</button>\r\n             <button onClick={handleOpenAvailabilityModal} className=\"btn btn-secondary btn-sm\">Set Availability</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Appointment History Section */}\r\n      <div className=\"profile-section\">\r\n        <div className=\"profile-section-header\">\r\n          <h3>Appointment History</h3>\r\n        </div>\r\n        <AppointmentList\r\n          // Filter the history to only show completed appointments\r\n          appointments={appointmentHistory.filter(appt => appt.status === 'completed')}\r\n          userType=\"doctor\"\r\n          onComplete={() => {}} // Placeholder - No action needed in history view\r\n          onCancel={() => {}}   // Placeholder\r\n        />\r\n        {/* Removed redundant empty state message - AppointmentList handles this */}\r\n      </div>\r\n\r\n      {/* Render Modals */}\r\n      <AvailabilityModal\r\n        isOpen={isAvailabilityModalOpen}\r\n        currentAvailability={doctorAvailability} // Pass fetched/updated availability\r\n        onUpdate={handleUpdateAvailability}\r\n        onClose={handleCloseAvailabilityModal}\r\n      />\r\n      <EditProfileModal\r\n        isOpen={isEditProfileModalOpen}\r\n        currentPhone={doctor.phone}\r\n        currentBio={doctor.bio}\r\n        onUpdate={handleUpdateProfile}\r\n        onClose={handleCloseEditProfileModal}\r\n      />\r\n      </div> {/* Close container */}\r\n    </div> // Close profile-page\r\n  );\r\n}\r\n\r\nexport default DoctorProfilePage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}