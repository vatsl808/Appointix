{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vatsl\\\\OneDrive\\\\Desktop\\\\CAS - Copy\\\\cas-frontend\\\\src\\\\pages\\\\DoctorListPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react'; // Ensure React is imported\nimport DoctorCard from '../components/DoctorCard';\nimport '../styles/doctor-list.css';\nimport '../styles/main.css'; // Ensure main styles are loaded\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DoctorListPage() {\n  _s();\n  const [doctors, setDoctors] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(''); // Add error state\n\n  useEffect(() => {\n    const fetchDoctors = async () => {\n      setLoading(true);\n      setError('');\n      try {\n        // Fetch from the backend API (running on port 5001)\n        const response = await fetch('http://localhost:5001/api/doctors');\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        setDoctors(data);\n      } catch (error) {\n        console.error('Error fetching doctors:', error);\n        setError('Failed to load doctors. Please try again later.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchDoctors();\n  }, []); // Empty dependency array means this runs once on mount\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading doctors...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Display error message if fetch failed\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container page-container error-doctors\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"doctor-list-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"doctor-list-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Available Doctors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"doctors-grid\",\n      children: doctors.map(doctor => /*#__PURE__*/_jsxDEV(DoctorCard, {\n        doctor: doctor\n      }, doctor.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n_s(DoctorListPage, \"fbBE31NTOgyc97b6/kDKQ/lTeT4=\");\n_c = DoctorListPage;\nexport default DoctorListPage;\nvar _c;\n$RefreshReg$(_c, \"DoctorListPage\");","map":{"version":3,"names":["React","useState","useEffect","DoctorCard","jsxDEV","_jsxDEV","DoctorListPage","_s","doctors","setDoctors","loading","setLoading","error","setError","fetchDoctors","response","fetch","ok","Error","status","data","json","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","doctor","id","_c","$RefreshReg$"],"sources":["C:/Users/vatsl/OneDrive/Desktop/CAS - Copy/cas-frontend/src/pages/DoctorListPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'; // Ensure React is imported\r\nimport DoctorCard from '../components/DoctorCard';\r\nimport '../styles/doctor-list.css';\r\nimport '../styles/main.css'; // Ensure main styles are loaded\r\n\r\nfunction DoctorListPage() {\r\n  const [doctors, setDoctors] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(''); // Add error state\r\n\r\n  useEffect(() => {\r\n    const fetchDoctors = async () => {\r\n      setLoading(true);\r\n      setError('');\r\n      try {\r\n        // Fetch from the backend API (running on port 5001)\r\n        const response = await fetch('http://localhost:5001/api/doctors');\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n        const data = await response.json();\r\n        setDoctors(data);\r\n      } catch (error) {\r\n        console.error('Error fetching doctors:', error);\r\n        setError('Failed to load doctors. Please try again later.');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchDoctors();\r\n  }, []); // Empty dependency array means this runs once on mount\r\n\r\n  if (loading) {\r\n    return <div className=\"loading\">Loading doctors...</div>;\r\n  }\r\n\r\n  // Display error message if fetch failed\r\n  if (error) {\r\n    return <div className=\"container page-container error-doctors\">{error}</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"doctor-list-page\">\r\n      {/* Use the header class from CSS */}\r\n      <div className=\"doctor-list-header\">\r\n        <h2>Available Doctors</h2>\r\n        {/* Optional: Add subtitle <p>Find the right specialist for your needs.</p> */}\r\n      </div>\r\n      {/* Use the correct grid class name */}\r\n      <div className=\"doctors-grid\">\r\n        {doctors.map(doctor => (\r\n          <DoctorCard key={doctor.id} doctor={doctor} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DoctorListPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}