{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vatsl\\\\OneDrive\\\\Desktop\\\\CAS\\\\cas-frontend\\\\src\\\\pages\\\\BookAppointmentPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport AppointmentForm from '../components/AppointmentForm';\nimport { isTimeSlotAvailable } from '../utils/availabilityUtils'; // Import validation function\nimport '../styles/appointment.css';\nimport '../styles/main.css';\n\n// Mock Availability Data (copied from DoctorProfilePage for now)\n// TODO: Refactor mock data into a shared location\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultAvailability = {\n  Monday: {\n    startTime: \"09:00\",\n    endTime: \"13:00\",\n    isAvailable: true\n  },\n  Tuesday: {\n    startTime: \"09:00\",\n    endTime: \"13:00\",\n    isAvailable: true\n  },\n  Wednesday: {\n    startTime: \"09:00\",\n    endTime: \"13:00\",\n    isAvailable: true\n  },\n  Thursday: {\n    startTime: \"09:00\",\n    endTime: \"13:00\",\n    isAvailable: true\n  },\n  Friday: {\n    startTime: \"09:00\",\n    endTime: \"13:00\",\n    isAvailable: true\n  },\n  Saturday: {\n    startTime: \"10:00\",\n    endTime: \"12:00\",\n    isAvailable: false\n  },\n  Sunday: {\n    startTime: \"\",\n    endTime: \"\",\n    isAvailable: false\n  }\n};\nconst mockDoctorAvailability = {\n  1: {\n    ...defaultAvailability\n  },\n  2: {\n    ...defaultAvailability,\n    Wednesday: {\n      startTime: \"14:00\",\n      endTime: \"18:00\",\n      isAvailable: true\n    },\n    Friday: {\n      startTime: \"\",\n      endTime: \"\",\n      isAvailable: false\n    }\n  },\n  3: {\n    ...defaultAvailability\n  }\n};\n\n// Mock Doctor Data (needed for availability lookup)\n// TODO: Refactor mock data into a shared location\nconst mockDoctors = [{\n  id: 1,\n  name: 'Dr. Smith',\n  specialization: 'Cardiology'\n}, {\n  id: 2,\n  name: 'Dr. Johnson',\n  specialization: 'Neurology'\n}, {\n  id: 3,\n  name: 'Dr. Williams',\n  specialization: 'Pediatrics'\n}];\nfunction BookAppointmentPage() {\n  _s();\n  const {\n    doctorId\n  } = useParams();\n  const navigate = useNavigate();\n  const [doctor, setDoctor] = useState(null);\n  const [doctorAvailability, setDoctorAvailability] = useState(null); // State for availability\n  const [loading, setLoading] = useState(true);\n  const [bookingError, setBookingError] = useState(''); // State for booking errors\n\n  useEffect(() => {\n    // Simulate fetching doctor details and availability\n    const fetchDoctorData = () => {\n      setLoading(true);\n      setBookingError(''); // Clear error on new load\n      try {\n        const foundDoctor = mockDoctors.find(d => d.id === parseInt(doctorId));\n        if (foundDoctor) {\n          setDoctor(foundDoctor);\n          // Fetch mock availability for this doctor\n          const availability = mockDoctorAvailability[foundDoctor.id] || {\n            ...defaultAvailability\n          };\n          setDoctorAvailability(availability);\n        } else {\n          // Handle doctor not found case if needed\n          console.error('Doctor not found for booking');\n          // Optionally set an error state here\n        }\n      } catch (error) {\n        console.error('Error fetching doctor details:', error);\n        // Optionally set an error state here\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    // Simulate network delay\n    const timer = setTimeout(fetchDoctorData, 300);\n    return () => clearTimeout(timer); // Cleanup timer\n  }, [doctorId]); // Re-fetch if doctorId changes\n\n  const handleSubmit = async appointmentData => {\n    setBookingError(''); // Clear previous errors\n\n    // --- Availability Check ---\n    if (!doctorAvailability) {\n      setBookingError('Doctor availability information is not available. Cannot book.');\n      return;\n    }\n    const isAvailable = isTimeSlotAvailable(doctorAvailability, appointmentData.date, appointmentData.time);\n    if (!isAvailable) {\n      setBookingError(`Sorry, Dr. ${doctor.name} is not available at the selected time. Please choose a different time.`);\n      return; // Stop submission\n    }\n    // --- End Availability Check ---\n\n    try {\n      // TODO: Replace with actual API call\n      console.log('Booking appointment (validated):', appointmentData);\n      // Mock successful booking\n      alert('Appointment booked successfully!'); // Simple success feedback\n      navigate('/patient-dashboard');\n    } catch (error) {\n      console.error('Error booking appointment:', error);\n      setBookingError('An error occurred while booking. Please try again.');\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading doctor details...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 12\n    }, this);\n  }\n  if (!doctor) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: \"Doctor not found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 12\n    }, this);\n  }\n  return (\n    /*#__PURE__*/\n    // Use the main container class from appointment.css\n    _jsxDEV(\"div\", {\n      className: \"book-appointment-page\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"appointment-form-container\",\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"book-appointment-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Book Appointment\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 11\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"doctor-info\",\n            children: [\"with Dr. \", doctor.name, \" (\", doctor.specialization, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 9\n        }, this), bookingError && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"alert alert-danger\",\n          children: bookingError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 26\n        }, this), /*#__PURE__*/_jsxDEV(AppointmentForm, {\n          doctorId: doctorId,\n          onSubmit: handleSubmit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 5\n    }, this)\n  );\n}\n_s(BookAppointmentPage, \"WJ1MSUrQhJPHiuEIHJwwJ2vukkI=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = BookAppointmentPage;\nexport default BookAppointmentPage;\nvar _c;\n$RefreshReg$(_c, \"BookAppointmentPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","AppointmentForm","isTimeSlotAvailable","jsxDEV","_jsxDEV","defaultAvailability","Monday","startTime","endTime","isAvailable","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday","mockDoctorAvailability","mockDoctors","id","name","specialization","BookAppointmentPage","_s","doctorId","navigate","doctor","setDoctor","doctorAvailability","setDoctorAvailability","loading","setLoading","bookingError","setBookingError","fetchDoctorData","foundDoctor","find","d","parseInt","availability","console","error","timer","setTimeout","clearTimeout","handleSubmit","appointmentData","date","time","log","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","_c","$RefreshReg$"],"sources":["C:/Users/vatsl/OneDrive/Desktop/CAS/cas-frontend/src/pages/BookAppointmentPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport AppointmentForm from '../components/AppointmentForm';\r\nimport { isTimeSlotAvailable } from '../utils/availabilityUtils'; // Import validation function\r\nimport '../styles/appointment.css';\r\nimport '../styles/main.css';\r\n\r\n// Mock Availability Data (copied from DoctorProfilePage for now)\r\n// TODO: Refactor mock data into a shared location\r\nconst defaultAvailability = {\r\n  Monday:    { startTime: \"09:00\", endTime: \"13:00\", isAvailable: true },\r\n  Tuesday:   { startTime: \"09:00\", endTime: \"13:00\", isAvailable: true },\r\n  Wednesday: { startTime: \"09:00\", endTime: \"13:00\", isAvailable: true },\r\n  Thursday:  { startTime: \"09:00\", endTime: \"13:00\", isAvailable: true },\r\n  Friday:    { startTime: \"09:00\", endTime: \"13:00\", isAvailable: true },\r\n  Saturday:  { startTime: \"10:00\", endTime: \"12:00\", isAvailable: false },\r\n  Sunday:    { startTime: \"\",      endTime: \"\",      isAvailable: false },\r\n};\r\nconst mockDoctorAvailability = {\r\n  1: { ...defaultAvailability },\r\n  2: {\r\n    ...defaultAvailability,\r\n    Wednesday: { startTime: \"14:00\", endTime: \"18:00\", isAvailable: true },\r\n    Friday:    { startTime: \"\", endTime: \"\", isAvailable: false },\r\n  },\r\n  3: { ...defaultAvailability },\r\n};\r\n\r\n// Mock Doctor Data (needed for availability lookup)\r\n// TODO: Refactor mock data into a shared location\r\nconst mockDoctors = [\r\n  { id: 1, name: 'Dr. Smith', specialization: 'Cardiology' },\r\n  { id: 2, name: 'Dr. Johnson', specialization: 'Neurology' },\r\n  { id: 3, name: 'Dr. Williams', specialization: 'Pediatrics' },\r\n];\r\n\r\n\r\nfunction BookAppointmentPage() {\r\n  const { doctorId } = useParams();\r\n  const navigate = useNavigate();\r\n  const [doctor, setDoctor] = useState(null);\r\n  const [doctorAvailability, setDoctorAvailability] = useState(null); // State for availability\r\n  const [loading, setLoading] = useState(true);\r\n  const [bookingError, setBookingError] = useState(''); // State for booking errors\r\n\r\n  useEffect(() => {\r\n    // Simulate fetching doctor details and availability\r\n    const fetchDoctorData = () => {\r\n      setLoading(true);\r\n      setBookingError(''); // Clear error on new load\r\n      try {\r\n        const foundDoctor = mockDoctors.find(d => d.id === parseInt(doctorId));\r\n        if (foundDoctor) {\r\n          setDoctor(foundDoctor);\r\n          // Fetch mock availability for this doctor\r\n          const availability = mockDoctorAvailability[foundDoctor.id] || { ...defaultAvailability };\r\n          setDoctorAvailability(availability);\r\n        } else {\r\n          // Handle doctor not found case if needed\r\n          console.error('Doctor not found for booking');\r\n          // Optionally set an error state here\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching doctor details:', error);\r\n        // Optionally set an error state here\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    // Simulate network delay\r\n    const timer = setTimeout(fetchDoctorData, 300);\r\n    return () => clearTimeout(timer); // Cleanup timer\r\n\r\n  }, [doctorId]); // Re-fetch if doctorId changes\r\n\r\n  const handleSubmit = async (appointmentData) => {\r\n    setBookingError(''); // Clear previous errors\r\n\r\n    // --- Availability Check ---\r\n    if (!doctorAvailability) {\r\n      setBookingError('Doctor availability information is not available. Cannot book.');\r\n      return;\r\n    }\r\n    const isAvailable = isTimeSlotAvailable(\r\n      doctorAvailability,\r\n      appointmentData.date,\r\n      appointmentData.time\r\n    );\r\n\r\n    if (!isAvailable) {\r\n      setBookingError(`Sorry, Dr. ${doctor.name} is not available at the selected time. Please choose a different time.`);\r\n      return; // Stop submission\r\n    }\r\n    // --- End Availability Check ---\r\n\r\n    try {\r\n      // TODO: Replace with actual API call\r\n      console.log('Booking appointment (validated):', appointmentData);\r\n      // Mock successful booking\r\n      alert('Appointment booked successfully!'); // Simple success feedback\r\n      navigate('/patient-dashboard');\r\n    } catch (error) {\r\n      console.error('Error booking appointment:', error);\r\n      setBookingError('An error occurred while booking. Please try again.');\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return <div className=\"loading\">Loading doctor details...</div>;\r\n  }\r\n\r\n  if (!doctor) {\r\n    return <div className=\"error\">Doctor not found</div>;\r\n  }\r\n\r\n  return (\r\n    // Use the main container class from appointment.css\r\n    <div className=\"book-appointment-page\">\r\n      <div className=\"appointment-form-container\"> {/* Wrap form in the styled container */}\r\n        <div className=\"book-appointment-header\">\r\n          <h2>Book Appointment</h2> {/* Use h2 for consistency */}\r\n          <p className=\"doctor-info\">\r\n            with Dr. {doctor.name} ({doctor.specialization})\r\n          </p>\r\n        </div>\r\n        {/* Display booking error message */}\r\n        {bookingError && <div className=\"alert alert-danger\">{bookingError}</div>}\r\n        <AppointmentForm doctorId={doctorId} onSubmit={handleSubmit} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BookAppointmentPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}