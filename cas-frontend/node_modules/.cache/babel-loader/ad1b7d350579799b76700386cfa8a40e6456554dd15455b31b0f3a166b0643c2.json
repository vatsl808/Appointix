{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vatsl\\\\OneDrive\\\\Desktop\\\\CAS\\\\cas-frontend\\\\src\\\\pages\\\\BookAppointmentPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport AppointmentForm from '../components/AppointmentForm';\nimport { isTimeSlotAvailable } from '../utils/availabilityUtils'; // Import validation function\nimport '../styles/appointment.css';\nimport '../styles/main.css';\n\n// Removed Mock Data definitions\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BookAppointmentPage() {\n  _s();\n  const {\n    doctorId\n  } = useParams();\n  const navigate = useNavigate();\n  const [doctor, setDoctor] = useState(null);\n  const [doctorAvailability, setDoctorAvailability] = useState(null); // State for availability\n  const [loading, setLoading] = useState(true);\n  const [bookingError, setBookingError] = useState(''); // State for initial loading errors\n  const [submissionError, setSubmissionError] = useState(''); // State for form submission errors\n\n  useEffect(() => {\n    // --- Authorization Check ---\n    const token = localStorage.getItem('token');\n    const userType = localStorage.getItem('userType');\n    if (!token || userType !== 'patient') {\n      console.error(\"Authorization Error: User is not a logged-in patient.\");\n      navigate('/access-denied'); // Redirect if not authorized\n      return; // Stop further execution\n    }\n    // --- End Authorization Check ---\n\n    const fetchDoctorData = async () => {\n      setLoading(true);\n      setBookingError('');\n      try {\n        const response = await fetch(`http://localhost:5001/api/doctors/${doctorId}`, {\n          headers: {\n            'Authorization': `Bearer ${token}` // Add the Authorization header\n          }\n        });\n        if (!response.ok) {\n          const errorData = await response.json();\n          throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log(\"Successfully fetched doctor data:\", data); // Log success\n        setDoctor(data);\n        setDoctorAvailability(data.availability); // Availability is included in the response\n      } catch (err) {\n        console.error('Error fetching doctor details:', err);\n        console.error(\"Caught error in fetchDoctorData:\", err); // Log the full error object\n        setBookingError(err.message || 'Failed to load doctor details.');\n        setDoctor(null); // Ensure no stale doctor data is shown on error\n        setDoctorAvailability(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchDoctorData();\n  }, [doctorId]); // Re-fetch if doctorId changes\n\n  const handleSubmit = async appointmentData => {\n    setSubmissionError(''); // Clear previous submission errors\n\n    // --- Availability Check ---\n    // This check might be redundant if fetchDoctorData handles it, but keep as safeguard\n    if (!doctorAvailability) {\n      setSubmissionError('Doctor availability information is not available. Cannot book.');\n      return;\n    }\n    const isAvailable = isTimeSlotAvailable(doctorAvailability, appointmentData.date, appointmentData.time);\n    if (!isAvailable) {\n      setSubmissionError(`Sorry, Dr. ${doctor.name} is not available at the selected time. Please choose a different time.`);\n      return; // Stop submission\n    }\n    // --- End Availability Check ---\n\n    try {\n      // Get token from local storage\n      const token = localStorage.getItem('token');\n      // This check might be redundant if the page-level auth handles it, but keep as safeguard\n      if (!token) {\n        setSubmissionError('Authentication error. Please log in again.');\n        return;\n      }\n\n      // Prepare data for API\n      const bookingPayload = {\n        doctorId: parseInt(doctorId),\n        // Ensure doctorId is an integer\n        date: appointmentData.date,\n        time: appointmentData.time,\n        reason: appointmentData.reason\n      };\n\n      // Call the backend booking API\n      const response = await fetch('http://localhost:5001/api/appointments', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}` // Send token for authentication\n        },\n        body: JSON.stringify(bookingPayload)\n      });\n      const result = await response.json();\n      if (!response.ok) {\n        // Handle errors from the backend (e.g., slot taken, server error)\n        throw new Error(result.error || `HTTP error! status: ${response.status}`);\n      }\n\n      // Booking successful\n      console.log('Booking successful:', result.message);\n      alert('Appointment booked successfully!'); // Give user feedback\n      navigate('/patient-dashboard'); // Redirect after successful booking\n    } catch (err) {\n      console.error('Error submitting booking:', err);\n      setSubmissionError(err.message || 'An error occurred while booking. Please try again.');\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading doctor details...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Display error *before* checking for doctor, so it always shows if there was a fetch problem\n  // Display error *before* checking for doctor, so it always shows if there was a fetch problem\n  if (bookingError) {\n    // Add inline style for top margin specifically for this error display scenario\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container page-container error\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert alert-danger\",\n        style: {\n          marginTop: 'calc(var(--spacing-unit) * 4)'\n        },\n        children: bookingError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 60\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 12\n    }, this);\n  }\n  if (!doctor) {\n    // This case should now primarily happen if fetch succeeded but data was unexpectedly null/empty\n    // Or if loading is done but error state wasn't set (less likely)\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container page-container error\",\n      children: \"Doctor data not available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 12\n    }, this);\n  }\n  return (\n    /*#__PURE__*/\n    // Use the main container class from appointment.css\n    _jsxDEV(\"div\", {\n      className: \"book-appointment-page\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"appointment-form-container\",\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"book-appointment-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Book Appointment\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 11\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"doctor-info\",\n            children: [\"with Dr. \", doctor.name, \" (\", doctor.specialization, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 9\n        }, this), submissionError && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"alert alert-danger\",\n          style: {\n            marginBottom: 'var(--spacing-unit)'\n          },\n          children: submissionError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(AppointmentForm, {\n          doctorId: doctorId,\n          onSubmit: handleSubmit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 5\n    }, this)\n  );\n}\n_s(BookAppointmentPage, \"myCrUY/SDRsxewMeA5HpQluqkNc=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = BookAppointmentPage;\nexport default BookAppointmentPage;\nvar _c;\n$RefreshReg$(_c, \"BookAppointmentPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","AppointmentForm","isTimeSlotAvailable","jsxDEV","_jsxDEV","BookAppointmentPage","_s","doctorId","navigate","doctor","setDoctor","doctorAvailability","setDoctorAvailability","loading","setLoading","bookingError","setBookingError","submissionError","setSubmissionError","token","localStorage","getItem","userType","console","error","fetchDoctorData","response","fetch","headers","ok","errorData","json","Error","status","data","log","availability","err","message","handleSubmit","appointmentData","isAvailable","date","time","name","bookingPayload","parseInt","reason","method","body","JSON","stringify","result","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","marginTop","specialization","marginBottom","onSubmit","_c","$RefreshReg$"],"sources":["C:/Users/vatsl/OneDrive/Desktop/CAS/cas-frontend/src/pages/BookAppointmentPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport AppointmentForm from '../components/AppointmentForm';\r\nimport { isTimeSlotAvailable } from '../utils/availabilityUtils'; // Import validation function\r\nimport '../styles/appointment.css';\r\nimport '../styles/main.css';\r\n\r\n// Removed Mock Data definitions\r\n\r\nfunction BookAppointmentPage() {\r\n  const { doctorId } = useParams();\r\n  const navigate = useNavigate();\r\n  const [doctor, setDoctor] = useState(null);\r\n  const [doctorAvailability, setDoctorAvailability] = useState(null); // State for availability\r\n  const [loading, setLoading] = useState(true);\r\n  const [bookingError, setBookingError] = useState(''); // State for initial loading errors\r\n  const [submissionError, setSubmissionError] = useState(''); // State for form submission errors\r\n\r\n  useEffect(() => {\r\n    // --- Authorization Check ---\r\n    const token = localStorage.getItem('token');\r\n    const userType = localStorage.getItem('userType');\r\n\r\n    if (!token || userType !== 'patient') {\r\n      console.error(\"Authorization Error: User is not a logged-in patient.\");\r\n      navigate('/access-denied'); // Redirect if not authorized\r\n      return; // Stop further execution\r\n    }\r\n    // --- End Authorization Check ---\r\n\r\n    const fetchDoctorData = async () => {\r\n      setLoading(true);\r\n      setBookingError('');\r\n      try {\r\n        const response = await fetch(`http://localhost:5001/api/doctors/${doctorId}`, {\r\n          headers: {\r\n            'Authorization': `Bearer ${token}` // Add the Authorization header\r\n          }\r\n        });\r\n        if (!response.ok) {\r\n          const errorData = await response.json();\r\n          throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\r\n        }\r\n        const data = await response.json();\r\n        console.log(\"Successfully fetched doctor data:\", data); // Log success\r\n        setDoctor(data);\r\n        setDoctorAvailability(data.availability); // Availability is included in the response\r\n      } catch (err) {\r\n        console.error('Error fetching doctor details:', err);\r\n        console.error(\"Caught error in fetchDoctorData:\", err); // Log the full error object\r\n        setBookingError(err.message || 'Failed to load doctor details.');\r\n        setDoctor(null); // Ensure no stale doctor data is shown on error\r\n        setDoctorAvailability(null);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchDoctorData();\r\n  }, [doctorId]); // Re-fetch if doctorId changes\r\n\r\n  const handleSubmit = async (appointmentData) => {\r\n    setSubmissionError(''); // Clear previous submission errors\r\n\r\n    // --- Availability Check ---\r\n    // This check might be redundant if fetchDoctorData handles it, but keep as safeguard\r\n    if (!doctorAvailability) {\r\n      setSubmissionError('Doctor availability information is not available. Cannot book.');\r\n      return;\r\n    }\r\n    const isAvailable = isTimeSlotAvailable(\r\n      doctorAvailability,\r\n      appointmentData.date,\r\n      appointmentData.time\r\n    );\r\n\r\n    if (!isAvailable) {\r\n      setSubmissionError(`Sorry, Dr. ${doctor.name} is not available at the selected time. Please choose a different time.`);\r\n      return; // Stop submission\r\n    }\r\n    // --- End Availability Check ---\r\n\r\n    try {\r\n      // Get token from local storage\r\n      const token = localStorage.getItem('token');\r\n      // This check might be redundant if the page-level auth handles it, but keep as safeguard\r\n      if (!token) {\r\n        setSubmissionError('Authentication error. Please log in again.');\r\n        return;\r\n      }\r\n\r\n      // Prepare data for API\r\n      const bookingPayload = {\r\n        doctorId: parseInt(doctorId), // Ensure doctorId is an integer\r\n        date: appointmentData.date,\r\n        time: appointmentData.time,\r\n        reason: appointmentData.reason\r\n      };\r\n\r\n      // Call the backend booking API\r\n      const response = await fetch('http://localhost:5001/api/appointments', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${token}` // Send token for authentication\r\n        },\r\n        body: JSON.stringify(bookingPayload),\r\n      });\r\n\r\n      const result = await response.json();\r\n\r\n      if (!response.ok) {\r\n        // Handle errors from the backend (e.g., slot taken, server error)\r\n        throw new Error(result.error || `HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      // Booking successful\r\n      console.log('Booking successful:', result.message);\r\n      alert('Appointment booked successfully!'); // Give user feedback\r\n      navigate('/patient-dashboard'); // Redirect after successful booking\r\n\r\n    } catch (err) {\r\n      console.error('Error submitting booking:', err);\r\n      setSubmissionError(err.message || 'An error occurred while booking. Please try again.');\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return <div className=\"loading\">Loading doctor details...</div>;\r\n  }\r\n\r\n  // Display error *before* checking for doctor, so it always shows if there was a fetch problem\r\n  // Display error *before* checking for doctor, so it always shows if there was a fetch problem\r\n  if (bookingError) {\r\n    // Add inline style for top margin specifically for this error display scenario\r\n    return <div className=\"container page-container error\"><div className=\"alert alert-danger\" style={{ marginTop: 'calc(var(--spacing-unit) * 4)' }}>{bookingError}</div></div>;\r\n  }\r\n\r\n  if (!doctor) {\r\n     // This case should now primarily happen if fetch succeeded but data was unexpectedly null/empty\r\n     // Or if loading is done but error state wasn't set (less likely)\r\n    return <div className=\"container page-container error\">Doctor data not available.</div>;\r\n  }\r\n\r\n  return (\r\n    // Use the main container class from appointment.css\r\n    <div className=\"book-appointment-page\">\r\n      <div className=\"appointment-form-container\"> {/* Wrap form in the styled container */}\r\n        <div className=\"book-appointment-header\">\r\n          <h2>Book Appointment</h2> {/* Use h2 for consistency */}\r\n          <p className=\"doctor-info\">\r\n            with Dr. {doctor.name} ({doctor.specialization})\r\n          </p>\r\n        </div>\r\n        {/* Display submission error message INSIDE the form container */}\r\n        {submissionError && <div className=\"alert alert-danger\" style={{ marginBottom: 'var(--spacing-unit)' }}>{submissionError}</div>}\r\n        <AppointmentForm doctorId={doctorId} onSubmit={handleSubmit} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BookAppointmentPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}